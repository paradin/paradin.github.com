<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[励 耘]]></title>
  <link href="http://liuliyun.me/atom.xml" rel="self"/>
  <link href="http://liuliyun.me/"/>
  <updated>2013-08-11T13:06:36+08:00</updated>
  <id>http://liuliyun.me/</id>
  <author>
    <name><![CDATA[LynnLiu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[支付宝可以个人即时支付]]></title>
    <link href="http://liuliyun.me/blog/2013/07/30/alipay_privite_im_payment/"/>
    <updated>2013-07-30T22:33:00+08:00</updated>
    <id>http://liuliyun.me/blog/2013/07/30/alipay_privite_im_payment</id>
    <content type="html"><![CDATA[<p>目前单纯的即时到账接口是必须要公司才可以，但是个人可以选择“双接口”（其中包括担保交易和即时接口）</p>

<p>这意味着：</p>

<p>个人账户的支付宝，可以通过实时交易来完成虚拟货物的销售，不必成立公司
支付宝并不介意项目是部署在海外的服务器上，所以备案这一步也可以省掉
大陆的个人创业者从此不必哭泣！</p>

<p><a href="https://b.alipay.com/order/techService.htm">接口文档</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python生成验证码图片]]></title>
    <link href="http://liuliyun.me/blog/2013/07/18/python_text_image/"/>
    <updated>2013-07-18T22:33:00+08:00</updated>
    <id>http://liuliyun.me/blog/2013/07/18/python_text_image</id>
    <content type="html"><![CDATA[<p>利用Captcha生成文字图片，可以用于简单验证码图片生成</p>

<!-- more -->


<pre><code># -*- coding: utf-8 -*- 
from Captcha.Visual import Text, Backgrounds, Distortions, ImageCaptcha 
from Captcha import Words 

myFontFactory = Text.FontFactory((50, 30), "ch") 

class myCaptcha(ImageCaptcha): 
  def getLayers(self, *args, **kwargs): 
    if kwargs.has_key('text'): 
      word = kwargs['text'] 
    else: 
      word = Words.defaultWordList.pick() 
    self.addSolution(word) 
    return [ 
      Backgrounds.Grid(size=7, foreground="gray"), 
      Backgrounds.RandomDots(dotSize=3, numDots=500), 
      Text.TextLayer(word, textColor='red' , fontFactory=myFontFactory), 
      Distortions.SineWarp(), 
    ] 

g = myCaptcha(text=u'測試一二三') 
i = g.render(size=(300,100)) 
i.save("chcaptcha.jpg")
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用网络存储搭建自己的代码库]]></title>
    <link href="http://liuliyun.me/blog/2013/07/16/privite_version_server/"/>
    <updated>2013-07-16T22:33:00+08:00</updated>
    <id>http://liuliyun.me/blog/2013/07/16/privite_version_server</id>
    <content type="html"><![CDATA[<p>其实不只是代码，任何其他需要进行版本管理的文档等都可以利用网络存储搭建自己的版本库。</p>

<p>有人说，直接把文件放到网盘、云盘就可以了。当然，如果能满足需求这是最简单粗暴、但不安全的方法。</p>

<p>这里介绍两种版本管理库的方法：svn，git，其他版本管理软件搭建可以自行发挥一下了。</p>

<p>利用版本管理库的目的：</p>

<pre><code>1. 可以进行版本管理
2. 同步到网盘的文件不是源文件，而是版本库文件
2. 版本库读取可以设置用户密码，更加安全
</code></pre>

<p>注意，以下所用的快盘、Dropbox不是必须的，只要用你有的网盘、云盘都可以。</p>

<!-- more -->


<h2>一、快盘+TorialSVN Server</h2>

<p>本地目录准备</p>

<pre><code>    。创建快盘目录
    。在其中创建一个svn目录（将库目录建在网盘同步目录，这样当有文件变化，就会自动同步了）
</code></pre>

<p>本地搭建svn服务</p>

<pre><code>    。通过svn server创建一个deposite
    。创建svn用户、用户组
    。在svn depo下创建项目，配置用户权限
</code></pre>

<p>签出本地编辑目录</p>

<pre><code>    。checkout该项目到工程目录（注意，网盘下的svn目录是版本库目录，不能直接编辑。需要签出到其他目录进行编辑，然后提交）
    。将工程中要上传的文件添加到svn ，不希望添加的文件可以添加到ignore list
    。提交
</code></pre>

<p>自动上传</p>

<pre><code>    。提交后，版本库目录就会有相应的变化
    。网盘工具会自动将版本库上传
</code></pre>

<p>其他机器访问</p>

<pre><code>    。利用网盘工具，下载版本库目录
    。利用版本管理工具TorialSVN Server，创建相应的用户，导入版本库目录
    。签出
</code></pre>

<h2>二、把Dropbox改造为Git私有仓库（转载）</h2>

<pre><code>作者: JeremyWei | 可以转载, 但必须以超链接形式标明文章原始出处和作者信息及版权声明
网址: http://weizhifeng.net/git-with-dropbox.html
Git Dropbox　
</code></pre>

<h2>前言</h2>

<p>Git作为强大的分布式版本控制工具，越来越受欢迎。大量的开源项目可以在Github上发布，不过项目是公共可见的，即人人可以fork。 对于一些用户，他们也有自己的项目，但是还不太想立刻就把项目开源出来，有可能是因为还没有完成，所以他们需要通过Git临时性地管理他们的「私有项目」，Github上虽然有私有项目托管服务，不过性价比不高。</p>

<p>Dropbox（墙）是最流行的云存储服务，通过Dropbox我们可以实现对Git私有项目的托管。</p>

<h2>思路</h2>

<p>我们的思路是在Dropbox客户端的目录中建立Git仓库，然后我们clone此仓库到本地仓库，然后我们进行提交操作，完成提交之后，我们执行push操作， 那么本地的数据会被push到Dropbox客户端目录的仓库中，之后Dropbox客户端会把仓库文件的更改同步到Dropbox服务器。</p>

<pre><code>+------------+            +-----------+              +---------+
|  Dropbox   |  --Sync-&gt;  |  Dropbox  |   --Clone-&gt;  | Working |
|   Server   |  &lt;-Sync--  |   Client  |   &lt;-Push---  |  Space  |
+------------+            +-----------+              +---------+
</code></pre>

<h2>实现</h2>

<p>我们现在Dropbox的目录中创建一个裸git仓库</p>

<pre><code>$ cd ~/Dropbox
$ mkdir git
$ git init --bare project.git
</code></pre>

<p>完成之后，我们clone这个仓库</p>

<pre><code>$ cd ~
$ git clone ~/Dropbox/project.git project
$ cd project
</code></pre>

<p>提交并且push</p>

<pre><code>$ touch README
$ git add .
$ git commit -m "init commit"
$ git push origin master
</code></pre>

<p>完成之后，Dropbox会把你push的内容同步到服务器，你通过<a href="https://www.dropbox.com/%E5%8F%AF%E4%BB%A5%E6%9F%A5%E7%9C%8B%E5%88%B0%E4%BB%93%E5%BA%93%E7%9A%84%E5%86%85%E5%AE%B9%E3%80%82">https://www.dropbox.com/%E5%8F%AF%E4%BB%A5%E6%9F%A5%E7%9C%8B%E5%88%B0%E4%BB%93%E5%BA%93%E7%9A%84%E5%86%85%E5%AE%B9%E3%80%82</a></p>

<p>参考
<a href="http://stackoverflow.com/questions/1960799/using-gitdropbox-together-effectively">http://stackoverflow.com/questions/1960799/using-gitdropbox-together-effectively</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unity3D学习随笔（一）]]></title>
    <link href="http://liuliyun.me/blog/2013/07/14/unity3d_study_note_1/"/>
    <updated>2013-07-14T22:33:00+08:00</updated>
    <id>http://liuliyun.me/blog/2013/07/14/unity3d_study_note_1</id>
    <content type="html"><![CDATA[<p>学习随笔将记录学习过程中的简单记录，不是教程。</p>

<!-- more -->


<h2>项目创建</h2>

<pre><code>    。创建一个项目
    。提供资源Assets：Font、Image、Shader
    。根据相应资源创建Materials：选择Texture 2d、Shader，Font的Mat不知道怎么创建，虽然可以从Font中选择其下的用
    。创建一个场景
    。场景增加元素，每个元素由Component组成，自由增加删除，还可以增加Script（直接将脚本拖入Inspector)
</code></pre>

<h2>项目资源</h2>

<pre><code>   。相机 Camera，决定视角，近景、远景
   。背景 Plane， 采用Plane-Z，就不用设置旋转了；选择Material：自发光还是自定义Shader；是否有碰撞检查；
   。文字 2d Text，Mesh Text 选择字体； Text Render 选择Material：字体材质；删除原来的GUIText
   。文字网格 Plane，采用Plane-Z；调整大小、位置；设置碰撞检测；无Render
   。脚本 Script，一般有 start、 update；public成员可以在编辑器中设置值；update按帧刷新，根据事件处理游戏表现
</code></pre>

<h2>多分辨率</h2>

<pre><code>    。发现可以选择常见的aspect进行预览
    。这方便很多
    。有一点不爽就是，显示器dpi和手机dpi不一样，导致界面大小不一致

    对于多分辨率屏的支持，百搭方法：
    。相机固定
    。增加背景相机进行填充空白区域
    。设定目标aspect，根据屏幕aspect，计算相机rect
    。target_aspect &lt; screem_aspect 则左右填充 pillarbox
    。target_aspect &gt; screem_aspect 则上下填充 letterbox
</code></pre>

<h2>嵌套关系</h2>

<pre><code>    。parent 通过父子关系建立依附的相对关系，子对象相对父对象：位置、旋转等
    。prefab 当在场景中编辑好了复杂的对象（集），希望能够重复创建相同的对象，可以先建立模型：从hieracky中拖入project中。创建好prefab就可以拖入场景，创建相同的对象。对对象的修改，可以应用到prefab，此时所有对象都会变化
</code></pre>

<h2>动作编辑</h2>

<pre><code>    。animation clip 可以在动作编辑器重编辑动作曲线；各种component的属性都可以编辑曲线，包括脚本变量。编辑好曲线，在运行过程中，相应的参数就会采样曲线数据进行设置。  
            选择要编辑的曲线、添加key设置keyframe、设置切线角
            旋转类型：欧拉、四元数（找球面最短路径，所以超过180度的旋转方向相反）
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[小E帮你查快递喽！]]></title>
    <link href="http://liuliyun.me/blog/2013/07/09/el_kuaidi/"/>
    <updated>2013-07-09T22:33:00+08:00</updated>
    <id>http://liuliyun.me/blog/2013/07/09/el_kuaidi</id>
    <content type="html"><![CDATA[<p><img src="https://dl.dropboxusercontent.com/u/54941343/EL_kuaidi.JPG" alt="" /></p>

<p>小E新增快递发货查询功能，支持多家常用快递公司。</p>

<p>已经支持：</p>

<pre><code>顺丰 申通 圆通 凡客 如风达
中通 全峰 韵达 天天 全日通
中通 汇通 中铁 EMS
</code></pre>

<!-- more -->


<p>回复【快递】查询最新支持的快递公司</p>

<p>需要查询其他快递公司，请直接回复快递公司名称，小E会快速新增支持。</p>

<p>回复【快递公司 单号】查询快递发货情况</p>

<p>快递公司可输入中文、拼音，注意，空格分隔公司和单号哦！</p>

<hr />

<p>想玩游戏的话，回复【幸运猜数】</p>

<p>更多功能，回复【h】</p>

<p>如果觉得有用，分享到你的微博、微信吧！</p>

<pre><code>-----------  易生活 个人微信公众  -----------
微信号：EasyTool

不止工作、学习、生活
还可以玩游戏

使用中有问题或建议，告诉小E，有问必答。
有什么希望小E提供的功能，可直接回复！
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[浅析Werkzeug服务无缝更新]]></title>
    <link href="http://liuliyun.me/blog/2013/06/27/qian-xi-Werkzeug-fu-wu-wufeng-geng-xin/"/>
    <updated>2013-06-27T22:56:00+08:00</updated>
    <id>http://liuliyun.me/blog/2013/06/27/qian-xi-Werkzeug-fu-wu-wufeng-geng-xin</id>
    <content type="html"><![CDATA[<p>一直以来对于SAE上python应用无缝更新好奇</p>

<p>今天就来分析一下</p>

<!--more-->


<h1>应用启动入口</h1>

<p>我用的是Flask</p>

<p>从dev_server.py中 WsgiWorker可以找到运行服务的入口：</p>

<pre><code>    from werkzeug.serving import run_simple
    run_simple(...)
</code></pre>

<p>注意其中参数： <strong><em>use_reloader = True</em></strong>，后面会分析到</p>

<h1>带重启功能启动</h1>

<p>use_reloader条件决定了直接启动服务还是带有自动重启功能启动</p>

<pre><code>def run_with_reloader(main_func, extra_files=None, interval=1):
"""Run the given function in an independent python interpreter."""
# ********如果是真正需要运行的进程********
if os.environ.get('WERKZEUG_RUN_MAIN') == 'true':
    # ********启动服务线程********
    thread.start_new_thread(main_func, ())
    try:
        # ********检测文件变化并重启********
        reloader_loop(extra_files, interval)
    except KeyboardInterrupt:
        return
try:
    # ********第一次启动，按reloader方式启动子进程********
    sys.exit(restart_with_reloader())
except KeyboardInterrupt:
    pass


def restart_with_reloader():
    """Spawn a new Python interpreter with the same arguments as this one,
    but running the reloader thread.
    """
    while 1:
        _log('info', ' * Restarting with reloader...')
        args = [sys.executable] + sys.argv
        new_environ = os.environ.copy()

        # ********标记当前启动为真正要运行的进程********
        new_environ['WERKZEUG_RUN_MAIN'] = 'true'

        # a weird bug on windows. sometimes unicode strings end up in the
        # environment and subprocess.call does not like this, encode them
        # to latin1 and continue.
        if os.name == 'nt':
            for key, value in new_environ.iteritems():
                if isinstance(value, unicode):
                    new_environ[key] = value.encode('iso-8859-1')

        # ********创建新的子进程，执行参数和当前进程一致********
        # ********应该是直到子进程退出才会返回********
        exit_code = subprocess.call(args, env=new_environ)
        if exit_code != 3:
            return exit_code
</code></pre>

<h1>问题</h1>

<p>通过以上分析，解释了我在本地起SAEPython服务时，通过日志，看到应用被初始化两次的原因</p>

<p>第二次启动有这么一条日志：</p>

<pre><code>     * Restarting with reloader...
</code></pre>

<p>这让的话，初始应用初始化过两次，而第一次初始化的应用没有用</p>

<p>如何解决这个问题呢？</p>

<h1>解决应用实例化两个的问题</h1>

<ol>
<li>创建一个启动应用</li>
<li>由这个启动应用以自动重启方式启动真实应用</li>
</ol>


<p>同真实模块一样创建一个启动应用模块dummy</p>

<pre><code>realapp/
  |
  - __init__.py
dummy/
  |
  - __init__.py
</code></pre>

<p>index.wsgi文件这么写</p>

<pre><code>    import sae, os

    if os.environ.get('WERKZEUG_RUN_MAIN') == 'true':
        print 'realy application'
        from realapp import app
        application = sae.create_wsgi_app(app)
    else:
        print 'dummy application'
        from dummy import dummy_app
        application = sae.create_wsgi_app(dummy_app)
</code></pre>

<p>这样在本地启动SAEPython，应用创建两个实例的问题就解决了。</p>

<h1>遗留问题</h1>

<p>发布到SAE后，以上方法不生效</p>

<pre><code>os.environ.get('WERKZEUG_RUN_MAIN') != 'true'
</code></pre>

<p>有知道原因的吗？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python程序监视自身退出]]></title>
    <link href="http://liuliyun.me/blog/2013/06/27/python_atexit_register/"/>
    <updated>2013-06-27T14:10:00+08:00</updated>
    <id>http://liuliyun.me/blog/2013/06/27/python_atexit_register</id>
    <content type="html"><![CDATA[<p>SAE上更新代码时，服务都可以无缝切换，无需人工重启服务</p>

<p>那么，怎么能够在服务重启前进行持久化操作呢</p>

<p>需要监视服务何时重启</p>

<p>python提供了一个绑定程序退出时处理函数的功能[<a href="http://docs.python.org/2/library/atexit.html">参考</a>]：</p>

<pre><code>atexit.register(func[, *args[, **kargs]])
</code></pre>

<!-- more -->


<p>程序结束，如调用sys.exit() 或者主模块执行结束时，就会执行注册的clean functions</p>

<pre><code>def goodbye():
    print 'Bye...'

atexit.register(goodbye)
</code></pre>

<p>需要注意的是，可以重复注册相同的clean functions，这可能是我们不希望的，以下方法可以防止重复注册：</p>

<pre><code>def goodbye():
    print 'Bye...'

for idx, handler in enumerate(atexit._exithandlers):
    if handler[0].func_name == 'goodbye':
        del atexit._exithandlers[idx]
        break

atexit.register(goodbye)
print atexit._exithandlers
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress+github 建站]]></title>
    <link href="http://liuliyun.me/blog/2013/06/25/octopress-plus-github-jian-zhan/"/>
    <updated>2013-06-25T14:10:00+08:00</updated>
    <id>http://liuliyun.me/blog/2013/06/25/octopress-plus-github-jian-zhan</id>
    <content type="html"><![CDATA[<p>建站的过程主要参考：</p>

<ol>
<li><a href="http://caok1231.com/blog/2012/06/24/install-octopress-to-write-blog">用octopress来写博客</a> &ndash; 常见说明</li>
<li><a href="http://shanewfx.github.io/blog/2012/02/16/bulid-blog-by-octopress/">搭Blog 学Git</a> &ndash; 中文Win XP下环境设置</li>
</ol>


<p>多余的我就不说了，主要说下我遇到的问题：</p>

<!--more-->


<ol>
<li><p>rebenv 可以不用，查看ruby版本号命令：ruby -v</p></li>
<li><p>不用rbenv的话，rbenv rehash 就不用执行了</p></li>
<li><p>创建github库一定要按照参考文章创建，名称：yourname.github.com , yourname必须是你的github帐号名</p></li>
<li><p>如果对git命令不熟悉，可以学下，快速学习可参考：<a href="https://na1.salesforce.com/help/doc/en/salesforce_git_developer_cheatsheet.pdf">https://na1.salesforce.com/help/doc/en/salesforce_git_developer_cheatsheet.pdf</a></p></li>
<li><p>中文系统下 rake generate，时提示错误，通过增加两个环境变量解决：</p>

<pre><code> LC_ALL=zh_CN.UTF-8
 LANG=zh_CN.UTF-8
</code></pre></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[E星的朋友们，我们来游戏吧！]]></title>
    <link href="http://liuliyun.me/blog/2013/06/23/el_lucknum/"/>
    <updated>2013-06-23T22:56:00+08:00</updated>
    <id>http://liuliyun.me/blog/2013/06/23/el_lucknum</id>
    <content type="html"><![CDATA[<p><img src="https://dl.dropboxusercontent.com/u/54941343/lucknum3.PNG" alt="" /></p>

<p>关注小E的微信公众</p>

<p>搜索微信号：EasyTool</p>

<p>或者扫一扫题图中的二维码</p>

<p>回复【幸运猜数】就可以开始游戏了</p>

<!-- more -->


<p>回复【1-999】之间的数字猜猜你的幸运数，根据提示“大”了还是“小”了，再猜猜吧</p>

<p>猜中之后会计算得分，前五次猜的数字同幸运数字的接近程度决定了你的得分哦！越早猜中，得分越高</p>

<p>中途要退出游戏，回复【退出】</p>

<p>回复【h】查看更多功能</p>

<pre><code>-----------  易生活 个人微信公众  -----------
微信号：EasyTool

不止工作、学习、生活
还可以玩游戏

使用中有问题或建议，告诉小E，有问必答。
有什么希望小E提供的功能，可直接回复！
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在SAE分布式服务上开发需要解决的问题]]></title>
    <link href="http://liuliyun.me/blog/2013/06/22/sae_distribute_dev_app/"/>
    <updated>2013-06-22T14:10:00+08:00</updated>
    <id>http://liuliyun.me/blog/2013/06/22/sae_distribute_dev_app</id>
    <content type="html"><![CDATA[<p>这是在开发“幸运猜数”微信游戏的时候遇到的问题</p>

<p>对游戏感兴趣的，可以关注微信公众ID: EasyTool</p>

<p>回复【幸运猜数】开始游戏</p>

<!-- more -->


<hr />

<p>之前提供的功能：【黄金】【双色球】【记事】等，都是无状态服务</p>

<p>而开发一款游戏，必然要求服务是有状态的</p>

<p>这样在SAE上的分布式环境下，还继续沿用无状态服务开发方式，必然遇到：</p>

<ol>
<li>分布式服务对于请求，会进行负载均衡分配</li>
<li>在A服务器开始游戏，游戏操作被发到B服务器了</li>
<li>于是，B服务器不知道玩家要做什么</li>
<li>玩家发了好多开始游戏请求，结果同时在A、B服务器开始游戏，玩家体验就错乱了</li>
</ol>


<p>那么，如何在SAE上开发有状态的应用呢？</p>

<p>宗旨就是：<strong>数据一致性保证</strong></p>

<p>设计思路：</p>

<ol>
<li>各分布服务共享关键数据</li>
<li>需要时同步关键数据</li>
<li>变化时更新关键数据</li>
</ol>


<p>SAE提供了如下数据共享方式：</p>

<ol>
<li>数据库</li>
<li>分布式session</li>
<li>分布式memcache</li>
</ol>


<p>python开发，我选择了分布式memcache，采用pylibmc包</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[查看dll依赖脚本]]></title>
    <link href="http://liuliyun.me/blog/2013/06/08/vs_view_dll_depency_bat/"/>
    <updated>2013-06-08T18:10:00+08:00</updated>
    <id>http://liuliyun.me/blog/2013/06/08/vs_view_dll_depency_bat</id>
    <content type="html"><![CDATA[<p>软件项目逐渐庞大，版本日益更新</p>

<p>难免在安装包中残留一些老的dll</p>

<p>为了检查dll的依赖关系，可以用<a href="http://download.csdn.net/detail/powerlly/4544320">dependency.exe</a>工具，然后人肉检查（略感蛋疼。。。）</p>

<p>还有命令行的方法</p>

<!-- more -->


<p>启动VS命令行：</p>

<p><img src="https://dl.dropboxusercontent.com/u/54941343/vs_cmd.png" alt="" /></p>

<p>定位到.dll所在目录</p>

<p>执行如下批处理脚本：</p>

<pre><code>set workPath="."
for /r "%workPath%\" %%i in ("*.dll") do (dumpbin /DEPENDENTS %%i &gt;&gt; dep.txt)
</code></pre>

<p>PS： 如果是<strong>动态加载的</strong>dll ，这方法就查不出来了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python中调用父类的同名方法]]></title>
    <link href="http://liuliyun.me/blog/2013/06/08/python_how_to_invoke_same_method_in_baseclass/"/>
    <updated>2013-06-08T18:10:00+08:00</updated>
    <id>http://liuliyun.me/blog/2013/06/08/python_how_to_invoke_same_method_in_baseclass</id>
    <content type="html"><![CDATA[<p>面向对象设计时，无可避免的会涉及到父类和子类的关系</p>

<p>封装、集成、多态，大家都能娓娓道来</p>

<p>道理是一样的，针对不同的语言，面向对象开发也会遇到不同情况需要解决</p>

<p>今天学习下python中如何调用父类同名方法</p>

<!-- more -->


<p>PS： 如果不调用的话，子类同名方法对父类方法是直接覆盖的</p>

<h2>python 2.2以前</h2>

<pre><code>class FooParent:
    def bar(self, message):
        print(message)

class FooChild(FooParent):
    def bar(self, message):
        FooParent.bar(self, message)

&gt;&gt;&gt; FooChild().bar("Hello, World.")
Hello, World.
</code></pre>

<p>缺点：</p>

<ul>
<li><p>要修改父类名称时，麻烦</p></li>
<li><p>多级、多继承时，基类方法会多次执行</p></li>
</ul>


<h2>2.2 以后</h2>

<pre><code>class FooParent:
    def bar(self, message):
        print(message)


class FooChild(FooParent):
    def bar(self, message):
        super(FooChild, self).bar(message)


&gt;&gt;&gt; FooChild().bar("Hello, World.")
Hello, World.
</code></pre>

<p>优点：</p>

<ul>
<li>基类名称想怎么改就怎么改了</li>
<li>多继承，不会多次调用基类方法</li>
</ul>


<p>参考：<a href="http://hi.baidu.com/thinkinginlamp/item/3095e2f52c642516ce9f32d5">如何在Python中调用父类的同名方法</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一款酷酷的电脑快捷键工具]]></title>
    <link href="http://liuliyun.me/blog/2013/06/08/el_a_shortcut_manager_tool/"/>
    <updated>2013-06-08T18:10:00+08:00</updated>
    <id>http://liuliyun.me/blog/2013/06/08/el_a_shortcut_manager_tool</id>
    <content type="html"><![CDATA[<p><img src="https://dl.dropboxusercontent.com/u/54941343/eform.png" alt="" /></p>

<p>每次，有同事、朋友在我电脑旁边看我操作的时候</p>

<p>都会惊讶我用的这个是什么</p>

<p>每次，我就为这款软件带来了新的用户</p>

<p>虽然据说是Japanese开发的</p>

<p>软件无国界，<a href="https://dl.dropboxusercontent.com/u/54941343/mform_0981e.rar">PC用户自取吧</a></p>

<!-- more -->


<p>使用方法：</p>

<ol>
<li>解压后直接运行，可以将其加入启动项，每次开机就自动运行了</li>
<li>启动后，用鼠标在桌面画个圈（硬币大小），奇迹就将出现。</li>
<li><p>右键中心的图标</p>

<pre><code> Task list 切换图标形状
 Page list 选择快捷键页，也可以直接滚动滚轮翻页
 Create new icon 创建快捷键图标
</code></pre></li>
<li><p>右键周围一圈的图标</p>

<pre><code> Duplicate 复制图标
 Delete 删除图标
 Open the folder 打开所在目录
 Options 修改设置
</code></pre></li>
<li><p>当创建新图标或者修改设置时，可以设置</p>

<p> <img src="https://dl.dropboxusercontent.com/u/54941343/eform_opts.png" alt="" /></p>

<pre><code> Caption 图标名称，注意不能输中文
 Path 需要点击图标时打开的网页文件、目录、程序的路径
</code></pre></li>
<li><p>点击中间图标，关闭</p></li>
<li><p>更多功能自己摸索吧︿＿︿</p></li>
</ol>


<p>&ndash;</p>

<pre><code>-----------  易生活 个人微信公众  -----------
微信号：EasyTool

不止工作、学习、生活
还可以玩游戏

使用中有问题或建议，告诉小E，有问必答。
有什么希望小E提供的功能，可直接回复！
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[转载]svn常用命令]]></title>
    <link href="http://liuliyun.me/blog/2013/06/06/svn_common_commands/"/>
    <updated>2013-06-06T14:10:00+08:00</updated>
    <id>http://liuliyun.me/blog/2013/06/06/svn_common_commands</id>
    <content type="html"><![CDATA[<p>一直用的TortoiseSVN，对命令行操作不了解，今天就来熟悉一下吧</p>

<p>我常用的svn操作</p>

<pre><code>。查看状态 svn st [path]
。创建目录 svn mkdir
。添加文件 svn add [file]
。提交修改 svn ci [file] -m 'comments'
。比较差异 svn diff [file]
。撤销修改 svn revert [file]
。签出 svn co [url]
</code></pre>

<!-- more -->


<p>以下是更详细的转载内容：<a href="http://os.51cto.com/art/200908/143157.htm">详解Linux命令行下常用svn命令</a></p>

<h2>常用svn命令的使用方法</h2>

<ol>
<li><p>Linux命令行下将文件checkout到本地目录</p>

<p> svn checkout path（path是服务器上的目录）</p>

<p> 例如：svn checkout svn://192.168.1.1/pro/domain</p>

<p> 简写：svn co</p></li>
<li><p>Linux命令行下往版本库中添加新的文件</p>

<p> svn add file</p>

<p> 例如：svn add test.php(添加test.php)</p>

<p> svn add *.php(添加当前目录下所有的php文件)</p></li>
<li><p>Linux命令行下将改动的文件提交到版本库</p>

<p> svn commit -m “LogMessage“ [-N] [&mdash;no-unlock] PATH(如果选择了保持锁，就使用–no-unlock开关)</p>

<p> 例如：svn commit -m “add test file for my test“ test.php</p>

<p> 简写：svn ci</p></li>
<li><p>Linux命令行下的加锁/解锁</p>

<p> svn lock -m “LockMessage“ [&mdash;force] PATH</p>

<p> 例如：svn lock -m “lock test file“ test.php</p>

<p> svn unlock PATH</p></li>
<li><p>Linux命令行下更新到某个版本</p>

<p> svn update -r m path</p>

<p> 例如：</p>

<p> svn update如果后面没有目录，默认将当前目录以及子目录下的所有文件都更新到最新版本。</p>

<p> svn update -r 200 test.php(将版本库中的文件test.php还原到版本200)</p>

<p> svn update test.php(更新，于版本库同步。如果在提交的时候提示过期的话，是因为冲突，需要先update，修改文件，然后清除svn resolved，最后再提交commit)</p>

<p> 简写：svn up</p></li>
<li><p>Linux命令行下查看文件或者目录状态</p>

<p> 1) svn status path（目录下的文件和子目录的状态，正常状态不显示）</p>

<p> 【?：不在svn的控制中；M：内容被修改；C：发生冲突；A：预定加入到版本库；K：被锁定】</p>

<p> 2）svn status -v path(显示文件和子目录状态)</p>

<p> 第一列保持相同，第二列显示工作版本号，第三和第四列显示最后一次修改的版本号和修改人。</p>

<p> 注：svn status、svn diff和 svn revert这三条命令在没有网络的情况下也可以执行的，原因是svn在本地的.svn中保留了本地版本的原始拷贝。</p>

<p> 简写：svn st</p></li>
<li><p>Linux命令行下删除文件</p>

<p> svn delete path -m “delete test fle“</p>

<p> 例如：svn delete svn://192.168.1.1/pro/domain/test.php -m “delete test file”</p>

<p> 或者直接svn delete test.php 然后再svn ci -m ‘delete test file‘，推荐使用这种</p>

<p> 简写：svn (del, remove, rm)</p></li>
<li><p>Linux命令行下查看日志</p>

<p> svn log path</p>

<p> 例如：svn log test.php 显示这个文件的所有修改记录，及其版本号的变化</p></li>
<li><p>Linux命令行下查看文件详细信息</p>

<p> svn info path</p>

<p> 例如：svn info test.php</p></li>
<li><p>Linux命令行下比较差异</p>

<p>svn diff path(将修改的文件与基础版本比较)</p>

<p>例如：svn diff test.php</p>

<p>svn diff -r m:n path(对版本m和版本n比较差异)</p>

<p>例如：svn diff -r 200:201 test.php</p>

<p>简写：svn di</p></li>
<li><p>Linux命令行下将两个版本之间的差异合并到当前文件</p>

<p>svn merge -r m:n path</p>

<p>例如：svn merge -r 200:205 test.php（将版本200与205之间的差异合并到当前文件，但是一般都会产生冲突，需要处理一下）</p></li>
<li><p>Linux命令行下SVN 帮助</p>

<p>svn help</p>

<p>svn help ci</p></li>
</ol>


<h2>下面写几个不经常用的</h2>

<ol>
<li><p>Linux命令行下版本库下的文件和目录列表</p>

<p> svn list path</p>

<p> 显示path目录下的所有属于版本库的文件和目录</p>

<p> 简写：svn ls</p></li>
<li><p>Linux命令行下创建纳入版本控制下的新目录</p>

<p> svn mkdir: 创建纳入版本控制下的新目录。</p>

<p> 用法:</p>

<p> 1、mkdir PATH…
 每一个以工作副本 PATH 指定的目录，都会创建在本地端，并且加入新增调度，以待下一次的提交。</p>

<p> 2、mkdir URL…
 每个以URL指定的目录，都会透过立即提交于仓库中创建.在这两个情况下，所有的中间目录都必须事先存在。</p></li>
<li><p>Linux命令行下恢复本地修改</p>

<p> svn revert: 恢复原始未改变的工作副本文件 (恢复大部份的本地修改)。revert:</p>

<p> 用法: revert PATH…</p>

<p> 注意: 本子命令不会存取网络，并且会解除冲突的状况。但是它不会恢复被删除的目录</p></li>
<li><p>Linux命令行下代码库URL变更</p></li>
</ol>


<p>svn switch (sw): 更新工作副本至不同的URL。</p>

<pre><code>用法: 
1、switch URL [PATH]
更新你的工作副本，映射到一个新的URL，其行为跟“svn update”很像，也会将服务器上文件与本地文件合并。这是将工作副本对应到同一仓库中某个分支或者标记的方法。

2、switch –relocate FROM TO [PATH...]
改写工作副本的URL元数据，以反映单纯的URL上的改变。当仓库的根URL变动(比如方案名或是主机名称变动)，但是工作副本仍旧对映到同一仓库的同一目录时使用这个命令更新工作副本与仓库的对应关系。
</code></pre>

<ol>
<li><p>Linux命令行下解决冲突</p>

<p> svn resolved: 移除工作副本的目录或文件的“冲突”状态。</p>

<p> 用法: resolved PATH…</p>

<p> 注意: 本子命令不会依语法来解决冲突或是移除冲突标记；它只是移除冲突的相关文件，然后让 PATH 可以再次提交。</p></li>
<li><p>Linux命令行下输出指定文件或URL的内容。</p>

<p> svn cat 目标[@版本]…如果指定了版本，将从指定的版本开始查找。</p>

<p> svn cat -r PREV filename > filename (PREV 是上一版本,也可以写具体版本号,这样输出结果是可以提交的)</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解析网页抓取所得gzip压缩数据]]></title>
    <link href="http://liuliyun.me/blog/2013/06/06/python_gzip_response_data_parse/"/>
    <updated>2013-06-06T14:10:00+08:00</updated>
    <id>http://liuliyun.me/blog/2013/06/06/python_gzip_response_data_parse</id>
    <content type="html"><![CDATA[<p>在进行网页数据抓取时，会遇到压缩数据，可能主要出于如下考虑：</p>

<ol>
<li><p>简单的防抓取方法</p>

<p> 没有经过分析就对抓取的网页内容直接进行文本解析，肯定会遇到问题，就像我开始的时候一样。。。</p></li>
<li><p>压缩数据减少流量</p>

<p> 这个一般用于提供数据接口，将数据压缩后可以大大减少流量</p></li>
</ol>


<p>以下提供对抓取数据的处理方法：</p>

<!-- more -->


<ol>
<li><p>检测反馈内容是否压缩，并对压缩内容解压</p></li>
<li><p>检测数据文本编码格式，解压后返回unicode文本</p></li>
</ol>


<p>检测编码格式所用工具：<a href="https://pypi.python.org/pypi/chardet">chardet</a></p>

<pre><code># -*- coding: utf-8 -*-

import gzip, StringIO, codecs, chardet
from utils import *

def getEncoding(txt):
    """ 检查文本内容的编码方式
    """
    try:
        coding = chardet.detect(txt)['encoding']

        if 'None' == coding:
            return None
        else:
            return coding

    except Exception as ex:
        print 'fail getEncoding {0}'.format(ex)
        return None

def readResponse(resp):
    """ 读取网页抓取返回内容
    """
    if resp.getcode() == 200:
        encoding = resp.headers.get('Content-Encoding')

        info = resp.read()

        if('gzip' == encoding):
            print 'read response compress gzip'
            try:
                gf = gzip.GzipFile(fileobj=StringIO.StringIO(info), mode="r")
                info = gf.read()
            except Exception as ex:
                print 'fail read response, gzip'
                info = ''

    if info!='':
        # 删除BOM头
        info = info.strip(codecs.BOM_UTF8)
        code = getEncoding(info)
        if code:
            info = info.decode(code)
            print 'read response, encoding {0}'.format(code)
        else:
            print 'fail parse text encode'

    return info
</code></pre>

<p>参考链接：</p>

<ol>
<li><a href="http://www.diveintopython.net/http_web_services/gzip_compression.html">Handling compressed data</a></li>
<li><a href="http://blog.knownsec.com/2012/04/about-content-encoding-gzip/">关于 Content-Encoding: gzip</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python 字符串编码]]></title>
    <link href="http://liuliyun.me/blog/2013/05/30/python_string_codec/"/>
    <updated>2013-05-30T14:10:00+08:00</updated>
    <id>http://liuliyun.me/blog/2013/05/30/python_string_codec</id>
    <content type="html"><![CDATA[<p>在pythong开发过程中经常遇到编码问题，原因在于没有正确理解编码解码过程</p>

<p>通过以下命令过程帮助理解下，各自体会吧。</p>

<!--more-->


<p>宗旨：<strong>由Unicode中转进行编码、解码</strong></p>

<pre><code>&gt;&gt;&gt; u = '\uffef'
&gt;&gt;&gt; print u
\uffef
&gt;&gt;&gt; u = u'\uffef'
&gt;&gt;&gt; print u
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeEncodeError: 'gbk' codec can't encode character u'\uffef' in position 0: illegal multibyte sequence
&gt;&gt;&gt; str(u)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeEncodeError: 'ascii' codec can't encode character u'\uffef' in position 0: ordinal not in range(128)
&gt;&gt;&gt; sys.stdout.encoding
'cp936'
&gt;&gt;&gt; x = u.encode('utf-8')
&gt;&gt;&gt; x
'\xef\xbf\xaf'
&gt;&gt;&gt; x.decode('utf-8')
u'\uffef'
&gt;&gt;&gt; x.encode('utf-8')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeDecodeError: 'ascii' codec can't decode byte 0xef in position 0: ordinal not in range(128)
&gt;&gt;&gt; u.decode('utf-8')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "E:\Program Files\Python27\lib\encodings\utf_8.py", line 16, in decode
    return codecs.utf_8_decode(input, errors, True)
UnicodeEncodeError: 'ascii' codec can't encode character u'\uffef' in position 0: ordinal not in range(128)
&gt;&gt;&gt; u.encode('utf-8')
'\xef\xbf\xaf'

&gt;&gt;&gt; print x
锟
&gt;&gt;&gt; str(x)
'\xef\xbf\xaf'
&gt;&gt;&gt; repr(x)
"'\\xef\\xbf\\xaf'"
&gt;&gt;&gt; repr(u)
"u'\\uffef'"
&gt;&gt;&gt; repr(str)
"&lt;type 'str'&gt;"
&gt;&gt;&gt; repr(unicode)
"&lt;type 'unicode'&gt;"

&gt;&gt;&gt; unicode(x)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeDecodeError: 'ascii' codec can't decode byte 0xef in position 0: ordinal not in range(128)
&gt;&gt;&gt; unicode(u)
u'\uffef'
&gt;&gt;&gt; isinstance(u, str)
False
&gt;&gt;&gt; isinstance(u, unicode)
True
&gt;&gt;&gt; isinstance(x, str)
True
&gt;&gt;&gt; isinstance(x, unicode)
False

&gt;&gt;&gt; import re
&gt;&gt;&gt; re.search(u'\uff', u)
  File "&lt;stdin&gt;", line 1
SyntaxError: (unicode error) 'unicodeescape' codec can't decode bytes in position 0-XXX escape
&gt;&gt;&gt; re.search(u'ff', u)
&gt;&gt;&gt; re.search(r'\uff', u)
&gt;&gt;&gt; re.search(ur'\uff', u)
  File "&lt;stdin&gt;", line 1
SyntaxError: (unicode error) 'rawunicodeescape' codec can't decode bytes in position\uXXXX



&gt;&gt;&gt; len(None)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: object of type 'NoneType' has no len()
&gt;&gt;&gt; len('aaa')
3
&gt;&gt;&gt; len([])
0
&gt;&gt;&gt; len(())
0
&gt;&gt;&gt; len({})
0
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python webservice调用-suds]]></title>
    <link href="http://liuliyun.me/blog/2013/05/22/python_webservice_suds/"/>
    <updated>2013-05-22T14:10:00+08:00</updated>
    <id>http://liuliyun.me/blog/2013/05/22/python_webservice_suds</id>
    <content type="html"><![CDATA[<p>python也可以调用webservice : suds</p>

<!--more-->


<p>在本地sae中可以运行</p>

<pre><code>    from suds.client import Client
    url =  "http://host:port/service.wsdl"  

    #根据wsdl创建一个WebService的Client  
    client = Client(url)

    # 查看webservice提供的服务
    print client

    # 调用接口
    client.service.Interface(...)

    # 构造复杂数据
    monitor1 = client.factory.create('MonitorEntry')
</code></pre>

<p>但是上传sae后，运行失败</p>

<pre><code>。suds需要写临时文件，应该是wsdl文件
。找了个解决办法：
    在suds/cache.py中用 
。但是sae声称 get_tmp_dir 暂不支持
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git操作图形教学]]></title>
    <link href="http://liuliyun.me/blog/2013/05/21/git_learn_branch/"/>
    <updated>2013-05-21T14:10:00+08:00</updated>
    <id>http://liuliyun.me/blog/2013/05/21/git_learn_branch</id>
    <content type="html"><![CDATA[<p>看到一个图形展示git使用的教程</p>

<p>简单明了得介绍了git命令的作用</p>

<p><a href="http://pcottle.github.io/learnGitBranching/" title="LearnGitBranching">LearnGitBranching</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[转载]python汉字处理的工具]]></title>
    <link href="http://liuliyun.me/blog/2013/05/17/python_chinese_text_parser/"/>
    <updated>2013-05-17T14:10:00+08:00</updated>
    <id>http://liuliyun.me/blog/2013/05/17/python_chinese_text_parser</id>
    <content type="html"><![CDATA[<p>下面这个小工具包含了：</p>

<pre><code>判断unicode是否是汉字，数字，英文，或者其他字符。 
全角符号转半角符号。 
unicode字符串归一化等工作。 
还有一个能处理多音字的汉字转拼音的程序，还在整理中。
</code></pre>

<!--more-->


<pre><code>#!/usr/bin/env python
# -*- coding:GBK -*- 
"""汉字处理的工具:
判断unicode是否是汉字，数字，英文，或者其他字符。
全角符号转半角符号。"""
__author__="internetsweeper &lt;zhengbin0713@gmail.com&gt;"
__date__="2007-08-04"

def is_chinese(uchar):
    """判断一个unicode是否是汉字"""
    if uchar &gt;= u'\u4e00' and uchar&lt;=u'\u9fa5':
        return True
    else:
        return False

def is_number(uchar):
    """判断一个unicode是否是数字"""
    if uchar &gt;= u'\u0030' and uchar&lt;=u'\u0039':
        return True
    else:
        return False

def is_alphabet(uchar):
    """判断一个unicode是否是英文字母"""
    if (uchar &gt;= u'\u0041' and uchar&lt;=u'\u005a') or (uchar &gt;= u'\u0061' and uchar&lt;=u'\u007a'):
        return True
    else:
        return False

def is_other(uchar):
    """判断是否非汉字，数字和英文字符"""
    if not (is_chinese(uchar) or is_number(uchar) or is_alphabet(uchar)):
        return True
    else:
        return False

def B2Q(uchar):
    """半角转全角"""
    inside_code=ord(uchar)
    if inside_code&lt;0x0020 or inside_code&gt;0x7e: #不是半角字符就返回原来的字符
        return uchar
    if inside_code==0x0020: #除了空格其他的全角半角的公式为:半角=全角-0xfee0
        inside_code=0x3000
    else:
        inside_code+=0xfee0
    return unichr(inside_code)

def Q2B(uchar):
    """全角转半角"""
    inside_code=ord(uchar)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mysql建库及用户命令实例]]></title>
    <link href="http://liuliyun.me/blog/2013/05/15/mysql_create_db_user_cmd/"/>
    <updated>2013-05-15T14:10:00+08:00</updated>
    <id>http://liuliyun.me/blog/2013/05/15/mysql_create_db_user_cmd</id>
    <content type="html"><![CDATA[<p>这里记录下mysql命令行下创建库及用户的命令</p>

<!--more-->


<pre><code>&gt;mysql -u root -p

&gt;show databases;

&gt;create database new_database;

&gt;create user 'name' identified by 'pwd';

&gt;grant all privileges on new_database.* to 'name'@'localhost' identified by 'pwd' with grant option; 

&gt;quit

&gt;mysql -u name -p

&gt;show databases;
</code></pre>
]]></content>
  </entry>
  
</feed>
