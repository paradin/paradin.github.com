<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[励 耘]]></title>
  <link href="http://liuliyun.me/atom.xml" rel="self"/>
  <link href="http://liuliyun.me/"/>
  <updated>2013-07-02T13:52:47+08:00</updated>
  <id>http://liuliyun.me/</id>
  <author>
    <name><![CDATA[LynnLiu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[浅析Werkzeug服务无缝更新]]></title>
    <link href="http://liuliyun.me/blog/2013/06/27/qian-xi-Werkzeug-fu-wu-wufeng-geng-xin/"/>
    <updated>2013-06-27T22:56:00+08:00</updated>
    <id>http://liuliyun.me/blog/2013/06/27/qian-xi-Werkzeug-fu-wu-wufeng-geng-xin</id>
    <content type="html"><![CDATA[<p>一直以来对于SAE上python应用无缝更新好奇</p>

<p>今天就来分析一下</p>

<!--more-->


<h1>应用启动入口</h1>

<p>我用的是Flask</p>

<p>从dev_server.py中 WsgiWorker可以找到运行服务的入口：</p>

<pre><code>    from werkzeug.serving import run_simple
    run_simple(...)
</code></pre>

<p>注意其中参数： <strong><em>use_reloader = True</em></strong>，后面会分析到</p>

<h1>带重启功能启动</h1>

<p>use_reloader条件决定了直接启动服务还是带有自动重启功能启动</p>

<pre><code>def run_with_reloader(main_func, extra_files=None, interval=1):
"""Run the given function in an independent python interpreter."""
# ********如果是真正需要运行的进程********
if os.environ.get('WERKZEUG_RUN_MAIN') == 'true':
    # ********启动服务线程********
    thread.start_new_thread(main_func, ())
    try:
        # ********检测文件变化并重启********
        reloader_loop(extra_files, interval)
    except KeyboardInterrupt:
        return
try:
    # ********第一次启动，按reloader方式启动子进程********
    sys.exit(restart_with_reloader())
except KeyboardInterrupt:
    pass


def restart_with_reloader():
    """Spawn a new Python interpreter with the same arguments as this one,
    but running the reloader thread.
    """
    while 1:
        _log('info', ' * Restarting with reloader...')
        args = [sys.executable] + sys.argv
        new_environ = os.environ.copy()

        # ********标记当前启动为真正要运行的进程********
        new_environ['WERKZEUG_RUN_MAIN'] = 'true'

        # a weird bug on windows. sometimes unicode strings end up in the
        # environment and subprocess.call does not like this, encode them
        # to latin1 and continue.
        if os.name == 'nt':
            for key, value in new_environ.iteritems():
                if isinstance(value, unicode):
                    new_environ[key] = value.encode('iso-8859-1')

        # ********创建新的子进程，执行参数和当前进程一致********
        # ********应该是直到子进程退出才会返回********
        exit_code = subprocess.call(args, env=new_environ)
        if exit_code != 3:
            return exit_code
</code></pre>

<h1>问题</h1>

<p>通过以上分析，解释了我在本地起SAEPython服务时，通过日志，看到应用被初始化两次的原因</p>

<p>第二次启动有这么一条日志：</p>

<pre><code>     * Restarting with reloader...
</code></pre>

<p>这让的话，初始应用初始化过两次，而第一次初始化的应用没有用</p>

<p>如何解决这个问题呢？</p>

<h1>解决应用实例化两个的问题</h1>

<ol>
<li>创建一个启动应用</li>
<li>由这个启动应用以自动重启方式启动真实应用</li>
</ol>


<p>同真实模块一样创建一个启动应用模块dummy</p>

<pre><code>realapp/
  |
  - __init__.py
dummy/
  |
  - __init__.py
</code></pre>

<p>index.wsgi文件这么写</p>

<pre><code>    import sae, os

    if os.environ.get('WERKZEUG_RUN_MAIN') == 'true':
        print 'realy application'
        from realapp import app
        application = sae.create_wsgi_app(app)
    else:
        print 'dummy application'
        from dummy import dummy_app
        application = sae.create_wsgi_app(dummy_app)
</code></pre>

<p>这样在本地启动SAEPython，应用创建两个实例的问题就解决了。</p>

<h1>遗留问题</h1>

<p>发布到SAE后，以上方法不生效</p>

<pre><code>os.environ.get('WERKZEUG_RUN_MAIN') != 'true'
</code></pre>

<p>有知道原因的吗？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python程序监视自身退出]]></title>
    <link href="http://liuliyun.me/blog/2013/06/27/python_atexit_register/"/>
    <updated>2013-06-27T14:10:00+08:00</updated>
    <id>http://liuliyun.me/blog/2013/06/27/python_atexit_register</id>
    <content type="html"><![CDATA[<p>SAE上更新代码时，服务都可以无缝切换，无需人工重启服务</p>

<p>那么，怎么能够在服务重启前进行持久化操作呢</p>

<p>需要监视服务何时重启</p>

<p>python提供了一个绑定程序退出时处理函数的功能[<a href="http://docs.python.org/2/library/atexit.html">参考</a>]：</p>

<pre><code>atexit.register(func[, *args[, **kargs]])
</code></pre>

<!-- more -->


<p>程序结束，如调用sys.exit() 或者主模块执行结束时，就会执行注册的clean functions</p>

<pre><code>def goodbye():
    print 'Bye...'

atexit.register(goodbye)
</code></pre>

<p>需要注意的是，可以重复注册相同的clean functions，这可能是我们不希望的，以下方法可以防止重复注册：</p>

<pre><code>def goodbye():
    print 'Bye...'

for idx, handler in enumerate(atexit._exithandlers):
    if handler[0].func_name == 'goodbye':
        del atexit._exithandlers[idx]
        break

atexit.register(goodbye)
print atexit._exithandlers
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress+github 建站]]></title>
    <link href="http://liuliyun.me/blog/2013/06/25/octopress-plus-github-jian-zhan/"/>
    <updated>2013-06-25T14:10:00+08:00</updated>
    <id>http://liuliyun.me/blog/2013/06/25/octopress-plus-github-jian-zhan</id>
    <content type="html"><![CDATA[<p>建站的过程主要参考：</p>

<ol>
<li><a href="http://caok1231.com/blog/2012/06/24/install-octopress-to-write-blog">用octopress来写博客</a> &ndash; 常见说明</li>
<li><a href="http://shanewfx.github.io/blog/2012/02/16/bulid-blog-by-octopress/">搭Blog 学Git</a> &ndash; 中文Win XP下环境设置</li>
</ol>


<p>多余的我就不说了，主要说下我遇到的问题：</p>

<!--more-->


<ol>
<li><p>rebenv 可以不用，查看ruby版本号命令：ruby -v</p></li>
<li><p>不用rbenv的话，rbenv rehash 就不用执行了</p></li>
<li><p>创建github库一定要按照参考文章创建，名称：yourname.github.com , yourname必须是你的github帐号名</p></li>
<li><p>如果对git命令不熟悉，可以学下，快速学习可参考：<a href="https://na1.salesforce.com/help/doc/en/salesforce_git_developer_cheatsheet.pdf">https://na1.salesforce.com/help/doc/en/salesforce_git_developer_cheatsheet.pdf</a></p></li>
<li><p>中文系统下 rake generate，时提示错误，通过增加两个环境变量解决：</p>

<pre><code> LC_ALL=zh_CN.UTF-8
 LANG=zh_CN.UTF-8
</code></pre></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[E星的朋友们，我们来游戏吧！]]></title>
    <link href="http://liuliyun.me/blog/2013/06/23/el_lucknum/"/>
    <updated>2013-06-23T22:56:00+08:00</updated>
    <id>http://liuliyun.me/blog/2013/06/23/el_lucknum</id>
    <content type="html"><![CDATA[<p><img src="https://dl.dropboxusercontent.com/u/54941343/lucknum3.PNG" alt="" /></p>

<p>关注小E的微信公众</p>

<p>搜索微信号：EasyTool</p>

<p>或者扫一扫题图中的二维码</p>

<p>回复【幸运猜数】就可以开始游戏了</p>

<!-- more -->


<p>回复【1-999】之间的数字猜猜你的幸运数，根据提示“大”了还是“小”了，再猜猜吧</p>

<p>猜中之后会计算得分，前五次猜的数字同幸运数字的接近程度决定了你的得分哦！越早猜中，得分越高</p>

<p>中途要退出游戏，回复【退出】</p>

<p>回复【h】查看更多功能</p>

<pre><code>-----------  易生活 个人微信公众  -----------
微信号：EasyTool

不止工作、学习、生活
还可以玩游戏

使用中有问题或建议，告诉小E，有问必答。
有什么希望小E提供的功能，可直接回复！
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在SAE分布式服务上开发需要解决的问题]]></title>
    <link href="http://liuliyun.me/blog/2013/06/22/sae_distribute_dev_app/"/>
    <updated>2013-06-22T14:10:00+08:00</updated>
    <id>http://liuliyun.me/blog/2013/06/22/sae_distribute_dev_app</id>
    <content type="html"><![CDATA[<p>这是在开发“幸运猜数”微信游戏的时候遇到的问题</p>

<p>对游戏感兴趣的，可以关注微信公众ID: EasyTool</p>

<p>回复【幸运猜数】开始游戏</p>

<!-- more -->


<hr />

<p>之前提供的功能：【黄金】【双色球】【记事】等，都是无状态服务</p>

<p>而开发一款游戏，必然要求服务是有状态的</p>

<p>这样在SAE上的分布式环境下，还继续沿用无状态服务开发方式，必然遇到：</p>

<ol>
<li>分布式服务对于请求，会进行负载均衡分配</li>
<li>在A服务器开始游戏，游戏操作被发到B服务器了</li>
<li>于是，B服务器不知道玩家要做什么</li>
<li>玩家发了好多开始游戏请求，结果同时在A、B服务器开始游戏，玩家体验就错乱了</li>
</ol>


<p>那么，如何在SAE上开发有状态的应用呢？</p>

<p>宗旨就是：<strong>数据一致性保证</strong></p>

<p>设计思路：</p>

<ol>
<li>各分布服务共享关键数据</li>
<li>需要时同步关键数据</li>
<li>变化时更新关键数据</li>
</ol>


<p>SAE提供了如下数据共享方式：</p>

<ol>
<li>数据库</li>
<li>分布式session</li>
<li>分布式memcache</li>
</ol>


<p>python开发，我选择了分布式memcache，采用pylibmc包</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[查看dll依赖脚本]]></title>
    <link href="http://liuliyun.me/blog/2013/06/08/vs_view_dll_depency_bat/"/>
    <updated>2013-06-08T18:10:00+08:00</updated>
    <id>http://liuliyun.me/blog/2013/06/08/vs_view_dll_depency_bat</id>
    <content type="html"><![CDATA[<p>软件项目逐渐庞大，版本日益更新</p>

<p>难免在安装包中残留一些老的dll</p>

<p>为了检查dll的依赖关系，可以用<a href="http://download.csdn.net/detail/powerlly/4544320">dependency.exe</a>工具，然后人肉检查（略感蛋疼。。。）</p>

<p>还有命令行的方法</p>

<!-- more -->


<p>启动VS命令行：</p>

<p><img src="https://dl.dropboxusercontent.com/u/54941343/vs_cmd.png" alt="" /></p>

<p>定位到.dll所在目录</p>

<p>执行如下批处理脚本：</p>

<pre><code>set workPath="."
for /r "%workPath%\" %%i in ("*.dll") do (dumpbin /DEPENDENTS %%i &gt;&gt; dep.txt)
</code></pre>

<p>PS： 如果是<strong>动态加载的</strong>dll ，这方法就查不出来了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python中调用父类的同名方法]]></title>
    <link href="http://liuliyun.me/blog/2013/06/08/python_how_to_invoke_same_method_in_baseclass/"/>
    <updated>2013-06-08T18:10:00+08:00</updated>
    <id>http://liuliyun.me/blog/2013/06/08/python_how_to_invoke_same_method_in_baseclass</id>
    <content type="html"><![CDATA[<p>面向对象设计时，无可避免的会涉及到父类和子类的关系</p>

<p>封装、集成、多态，大家都能娓娓道来</p>

<p>道理是一样的，针对不同的语言，面向对象开发也会遇到不同情况需要解决</p>

<p>今天学习下python中如何调用父类同名方法</p>

<!-- more -->


<p>PS： 如果不调用的话，子类同名方法对父类方法是直接覆盖的</p>

<h2>python 2.2以前</h2>

<pre><code>class FooParent:
    def bar(self, message):
        print(message)

class FooChild(FooParent):
    def bar(self, message):
        FooParent.bar(self, message)

&gt;&gt;&gt; FooChild().bar("Hello, World.")
Hello, World.
</code></pre>

<p>缺点：</p>

<ul>
<li><p>要修改父类名称时，麻烦</p></li>
<li><p>多级、多继承时，基类方法会多次执行</p></li>
</ul>


<h2>2.2 以后</h2>

<pre><code>class FooParent:
    def bar(self, message):
        print(message)


class FooChild(FooParent):
    def bar(self, message):
        super(FooChild, self).bar(message)


&gt;&gt;&gt; FooChild().bar("Hello, World.")
Hello, World.
</code></pre>

<p>优点：</p>

<ul>
<li>基类名称想怎么改就怎么改了</li>
<li>多继承，不会多次调用基类方法</li>
</ul>


<p>参考：<a href="http://hi.baidu.com/thinkinginlamp/item/3095e2f52c642516ce9f32d5">如何在Python中调用父类的同名方法</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一款酷酷的电脑快捷键工具]]></title>
    <link href="http://liuliyun.me/blog/2013/06/08/el_a_shortcut_manager_tool/"/>
    <updated>2013-06-08T18:10:00+08:00</updated>
    <id>http://liuliyun.me/blog/2013/06/08/el_a_shortcut_manager_tool</id>
    <content type="html"><![CDATA[<p><img src="https://dl.dropboxusercontent.com/u/54941343/eform.png" alt="" /></p>

<p>每次，有同事、朋友在我电脑旁边看我操作的时候</p>

<p>都会惊讶我用的这个是什么</p>

<p>每次，我就为这款软件带来了新的用户</p>

<p>虽然据说是Japanese开发的</p>

<p>软件无国界，<a href="https://dl.dropboxusercontent.com/u/54941343/mform_0981e.rar">PC用户自取吧</a></p>

<!-- more -->


<p>使用方法：</p>

<ol>
<li>解压后直接运行，可以将其加入启动项，每次开机就自动运行了</li>
<li>启动后，用鼠标在桌面画个圈（硬币大小），奇迹就将出现。</li>
<li><p>右键中心的图标</p>

<pre><code> Task list 切换图标形状
 Page list 选择快捷键页，也可以直接滚动滚轮翻页
 Create new icon 创建快捷键图标
</code></pre></li>
<li><p>右键周围一圈的图标</p>

<pre><code> Duplicate 复制图标
 Delete 删除图标
 Open the folder 打开所在目录
 Options 修改设置
</code></pre></li>
<li><p>当创建新图标或者修改设置时，可以设置</p>

<p> <img src="https://dl.dropboxusercontent.com/u/54941343/eform_opts.png" alt="" /></p>

<pre><code> Caption 图标名称，注意不能输中文
 Path 需要点击图标时打开的网页文件、目录、程序的路径
</code></pre></li>
<li><p>点击中间图标，关闭</p></li>
<li><p>更多功能自己摸索吧︿＿︿</p></li>
</ol>


<p>&ndash;</p>

<pre><code>-----------  易生活 个人微信公众  -----------
微信号：EasyTool

不止工作、学习、生活
还可以玩游戏

使用中有问题或建议，告诉小E，有问必答。
有什么希望小E提供的功能，可直接回复！
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[转载]svn常用命令]]></title>
    <link href="http://liuliyun.me/blog/2013/06/06/svn_common_commands/"/>
    <updated>2013-06-06T14:10:00+08:00</updated>
    <id>http://liuliyun.me/blog/2013/06/06/svn_common_commands</id>
    <content type="html"><![CDATA[<p>一直用的TortoiseSVN，对命令行操作不了解，今天就来熟悉一下吧</p>

<p>我常用的svn操作</p>

<pre><code>。查看状态 svn st [path]
。创建目录 svn mkdir
。添加文件 svn add [file]
。提交修改 svn ci [file] -m 'comments'
。比较差异 svn diff [file]
。撤销修改 svn revert [file]
。签出 svn co [url]
</code></pre>

<!-- more -->


<p>以下是更详细的转载内容：<a href="http://os.51cto.com/art/200908/143157.htm">详解Linux命令行下常用svn命令</a></p>

<h2>常用svn命令的使用方法</h2>

<ol>
<li><p>Linux命令行下将文件checkout到本地目录</p>

<p> svn checkout path（path是服务器上的目录）</p>

<p> 例如：svn checkout svn://192.168.1.1/pro/domain</p>

<p> 简写：svn co</p></li>
<li><p>Linux命令行下往版本库中添加新的文件</p>

<p> svn add file</p>

<p> 例如：svn add test.php(添加test.php)</p>

<p> svn add *.php(添加当前目录下所有的php文件)</p></li>
<li><p>Linux命令行下将改动的文件提交到版本库</p>

<p> svn commit -m “LogMessage“ [-N] [&mdash;no-unlock] PATH(如果选择了保持锁，就使用–no-unlock开关)</p>

<p> 例如：svn commit -m “add test file for my test“ test.php</p>

<p> 简写：svn ci</p></li>
<li><p>Linux命令行下的加锁/解锁</p>

<p> svn lock -m “LockMessage“ [&mdash;force] PATH</p>

<p> 例如：svn lock -m “lock test file“ test.php</p>

<p> svn unlock PATH</p></li>
<li><p>Linux命令行下更新到某个版本</p>

<p> svn update -r m path</p>

<p> 例如：</p>

<p> svn update如果后面没有目录，默认将当前目录以及子目录下的所有文件都更新到最新版本。</p>

<p> svn update -r 200 test.php(将版本库中的文件test.php还原到版本200)</p>

<p> svn update test.php(更新，于版本库同步。如果在提交的时候提示过期的话，是因为冲突，需要先update，修改文件，然后清除svn resolved，最后再提交commit)</p>

<p> 简写：svn up</p></li>
<li><p>Linux命令行下查看文件或者目录状态</p>

<p> 1) svn status path（目录下的文件和子目录的状态，正常状态不显示）</p>

<p> 【?：不在svn的控制中；M：内容被修改；C：发生冲突；A：预定加入到版本库；K：被锁定】</p>

<p> 2）svn status -v path(显示文件和子目录状态)</p>

<p> 第一列保持相同，第二列显示工作版本号，第三和第四列显示最后一次修改的版本号和修改人。</p>

<p> 注：svn status、svn diff和 svn revert这三条命令在没有网络的情况下也可以执行的，原因是svn在本地的.svn中保留了本地版本的原始拷贝。</p>

<p> 简写：svn st</p></li>
<li><p>Linux命令行下删除文件</p>

<p> svn delete path -m “delete test fle“</p>

<p> 例如：svn delete svn://192.168.1.1/pro/domain/test.php -m “delete test file”</p>

<p> 或者直接svn delete test.php 然后再svn ci -m ‘delete test file‘，推荐使用这种</p>

<p> 简写：svn (del, remove, rm)</p></li>
<li><p>Linux命令行下查看日志</p>

<p> svn log path</p>

<p> 例如：svn log test.php 显示这个文件的所有修改记录，及其版本号的变化</p></li>
<li><p>Linux命令行下查看文件详细信息</p>

<p> svn info path</p>

<p> 例如：svn info test.php</p></li>
<li><p>Linux命令行下比较差异</p>

<p>svn diff path(将修改的文件与基础版本比较)</p>

<p>例如：svn diff test.php</p>

<p>svn diff -r m:n path(对版本m和版本n比较差异)</p>

<p>例如：svn diff -r 200:201 test.php</p>

<p>简写：svn di</p></li>
<li><p>Linux命令行下将两个版本之间的差异合并到当前文件</p>

<p>svn merge -r m:n path</p>

<p>例如：svn merge -r 200:205 test.php（将版本200与205之间的差异合并到当前文件，但是一般都会产生冲突，需要处理一下）</p></li>
<li><p>Linux命令行下SVN 帮助</p>

<p>svn help</p>

<p>svn help ci</p></li>
</ol>


<h2>下面写几个不经常用的</h2>

<ol>
<li><p>Linux命令行下版本库下的文件和目录列表</p>

<p> svn list path</p>

<p> 显示path目录下的所有属于版本库的文件和目录</p>

<p> 简写：svn ls</p></li>
<li><p>Linux命令行下创建纳入版本控制下的新目录</p>

<p> svn mkdir: 创建纳入版本控制下的新目录。</p>

<p> 用法:</p>

<p> 1、mkdir PATH…
 每一个以工作副本 PATH 指定的目录，都会创建在本地端，并且加入新增调度，以待下一次的提交。</p>

<p> 2、mkdir URL…
 每个以URL指定的目录，都会透过立即提交于仓库中创建.在这两个情况下，所有的中间目录都必须事先存在。</p></li>
<li><p>Linux命令行下恢复本地修改</p>

<p> svn revert: 恢复原始未改变的工作副本文件 (恢复大部份的本地修改)。revert:</p>

<p> 用法: revert PATH…</p>

<p> 注意: 本子命令不会存取网络，并且会解除冲突的状况。但是它不会恢复被删除的目录</p></li>
<li><p>Linux命令行下代码库URL变更</p></li>
</ol>


<p>svn switch (sw): 更新工作副本至不同的URL。</p>

<pre><code>用法: 
1、switch URL [PATH]
更新你的工作副本，映射到一个新的URL，其行为跟“svn update”很像，也会将服务器上文件与本地文件合并。这是将工作副本对应到同一仓库中某个分支或者标记的方法。

2、switch –relocate FROM TO [PATH...]
改写工作副本的URL元数据，以反映单纯的URL上的改变。当仓库的根URL变动(比如方案名或是主机名称变动)，但是工作副本仍旧对映到同一仓库的同一目录时使用这个命令更新工作副本与仓库的对应关系。
</code></pre>

<ol>
<li><p>Linux命令行下解决冲突</p>

<p> svn resolved: 移除工作副本的目录或文件的“冲突”状态。</p>

<p> 用法: resolved PATH…</p>

<p> 注意: 本子命令不会依语法来解决冲突或是移除冲突标记；它只是移除冲突的相关文件，然后让 PATH 可以再次提交。</p></li>
<li><p>Linux命令行下输出指定文件或URL的内容。</p>

<p> svn cat 目标[@版本]…如果指定了版本，将从指定的版本开始查找。</p>

<p> svn cat -r PREV filename > filename (PREV 是上一版本,也可以写具体版本号,这样输出结果是可以提交的)</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解析网页抓取所得gzip压缩数据]]></title>
    <link href="http://liuliyun.me/blog/2013/06/06/python_gzip_response_data_parse/"/>
    <updated>2013-06-06T14:10:00+08:00</updated>
    <id>http://liuliyun.me/blog/2013/06/06/python_gzip_response_data_parse</id>
    <content type="html"><![CDATA[<p>在进行网页数据抓取时，会遇到压缩数据，可能主要出于如下考虑：</p>

<ol>
<li><p>简单的防抓取方法</p>

<p> 没有经过分析就对抓取的网页内容直接进行文本解析，肯定会遇到问题，就像我开始的时候一样。。。</p></li>
<li><p>压缩数据减少流量</p>

<p> 这个一般用于提供数据接口，将数据压缩后可以大大减少流量</p></li>
</ol>


<p>以下提供对抓取数据的处理方法：</p>

<!-- more -->


<ol>
<li><p>检测反馈内容是否压缩，并对压缩内容解压</p></li>
<li><p>检测数据文本编码格式，解压后返回unicode文本</p></li>
</ol>


<p>检测编码格式所用工具：<a href="https://pypi.python.org/pypi/chardet">chardet</a></p>

<pre><code># -*- coding: utf-8 -*-

import gzip, StringIO, codecs, chardet
from utils import *

def getEncoding(txt):
    """ 检查文本内容的编码方式
    """
    try:
        coding = chardet.detect(txt)['encoding']

        if 'None' == coding:
            return None
        else:
            return coding

    except Exception as ex:
        print 'fail getEncoding {0}'.format(ex)
        return None

def readResponse(resp):
    """ 读取网页抓取返回内容
    """
    if resp.getcode() == 200:
        encoding = resp.headers.get('Content-Encoding')

        info = resp.read()

        if('gzip' == encoding):
            print 'read response compress gzip'
            try:
                gf = gzip.GzipFile(fileobj=StringIO.StringIO(info), mode="r")
                info = gf.read()
            except Exception as ex:
                print 'fail read response, gzip'
                info = ''

    if info!='':
        # 删除BOM头
        info = info.strip(codecs.BOM_UTF8)
        code = getEncoding(info)
        if code:
            info = info.decode(code)
            print 'read response, encoding {0}'.format(code)
        else:
            print 'fail parse text encode'

    return info
</code></pre>

<p>参考链接：</p>

<ol>
<li><a href="http://www.diveintopython.net/http_web_services/gzip_compression.html">Handling compressed data</a></li>
<li><a href="http://blog.knownsec.com/2012/04/about-content-encoding-gzip/">关于 Content-Encoding: gzip</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python 字符串编码]]></title>
    <link href="http://liuliyun.me/blog/2013/05/30/python_string_codec/"/>
    <updated>2013-05-30T14:10:00+08:00</updated>
    <id>http://liuliyun.me/blog/2013/05/30/python_string_codec</id>
    <content type="html"><![CDATA[<p>在pythong开发过程中经常遇到编码问题，原因在于没有正确理解编码解码过程</p>

<p>通过以下命令过程帮助理解下，各自体会吧。</p>

<!--more-->


<p>宗旨：<strong>由Unicode中转进行编码、解码</strong></p>

<pre><code>&gt;&gt;&gt; u = '\uffef'
&gt;&gt;&gt; print u
\uffef
&gt;&gt;&gt; u = u'\uffef'
&gt;&gt;&gt; print u
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeEncodeError: 'gbk' codec can't encode character u'\uffef' in position 0: illegal multibyte sequence
&gt;&gt;&gt; str(u)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeEncodeError: 'ascii' codec can't encode character u'\uffef' in position 0: ordinal not in range(128)
&gt;&gt;&gt; sys.stdout.encoding
'cp936'
&gt;&gt;&gt; x = u.encode('utf-8')
&gt;&gt;&gt; x
'\xef\xbf\xaf'
&gt;&gt;&gt; x.decode('utf-8')
u'\uffef'
&gt;&gt;&gt; x.encode('utf-8')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeDecodeError: 'ascii' codec can't decode byte 0xef in position 0: ordinal not in range(128)
&gt;&gt;&gt; u.decode('utf-8')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "E:\Program Files\Python27\lib\encodings\utf_8.py", line 16, in decode
    return codecs.utf_8_decode(input, errors, True)
UnicodeEncodeError: 'ascii' codec can't encode character u'\uffef' in position 0: ordinal not in range(128)
&gt;&gt;&gt; u.encode('utf-8')
'\xef\xbf\xaf'

&gt;&gt;&gt; print x
锟
&gt;&gt;&gt; str(x)
'\xef\xbf\xaf'
&gt;&gt;&gt; repr(x)
"'\\xef\\xbf\\xaf'"
&gt;&gt;&gt; repr(u)
"u'\\uffef'"
&gt;&gt;&gt; repr(str)
"&lt;type 'str'&gt;"
&gt;&gt;&gt; repr(unicode)
"&lt;type 'unicode'&gt;"

&gt;&gt;&gt; unicode(x)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeDecodeError: 'ascii' codec can't decode byte 0xef in position 0: ordinal not in range(128)
&gt;&gt;&gt; unicode(u)
u'\uffef'
&gt;&gt;&gt; isinstance(u, str)
False
&gt;&gt;&gt; isinstance(u, unicode)
True
&gt;&gt;&gt; isinstance(x, str)
True
&gt;&gt;&gt; isinstance(x, unicode)
False

&gt;&gt;&gt; import re
&gt;&gt;&gt; re.search(u'\uff', u)
  File "&lt;stdin&gt;", line 1
SyntaxError: (unicode error) 'unicodeescape' codec can't decode bytes in position 0-XXX escape
&gt;&gt;&gt; re.search(u'ff', u)
&gt;&gt;&gt; re.search(r'\uff', u)
&gt;&gt;&gt; re.search(ur'\uff', u)
  File "&lt;stdin&gt;", line 1
SyntaxError: (unicode error) 'rawunicodeescape' codec can't decode bytes in position\uXXXX



&gt;&gt;&gt; len(None)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: object of type 'NoneType' has no len()
&gt;&gt;&gt; len('aaa')
3
&gt;&gt;&gt; len([])
0
&gt;&gt;&gt; len(())
0
&gt;&gt;&gt; len({})
0
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python webservice调用-suds]]></title>
    <link href="http://liuliyun.me/blog/2013/05/22/python_webservice_suds/"/>
    <updated>2013-05-22T14:10:00+08:00</updated>
    <id>http://liuliyun.me/blog/2013/05/22/python_webservice_suds</id>
    <content type="html"><![CDATA[<p>python也可以调用webservice : suds</p>

<!--more-->


<p>在本地sae中可以运行</p>

<pre><code>    from suds.client import Client
    url =  "http://host:port/service.wsdl"  

    #根据wsdl创建一个WebService的Client  
    client = Client(url)

    # 查看webservice提供的服务
    print client

    # 调用接口
    client.service.Interface(...)

    # 构造复杂数据
    monitor1 = client.factory.create('MonitorEntry')
</code></pre>

<p>但是上传sae后，运行失败</p>

<pre><code>。suds需要写临时文件，应该是wsdl文件
。找了个解决办法：
    在suds/cache.py中用 
。但是sae声称 get_tmp_dir 暂不支持
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git操作图形教学]]></title>
    <link href="http://liuliyun.me/blog/2013/05/21/git_learn_branch/"/>
    <updated>2013-05-21T14:10:00+08:00</updated>
    <id>http://liuliyun.me/blog/2013/05/21/git_learn_branch</id>
    <content type="html"><![CDATA[<p>看到一个图形展示git使用的教程</p>

<p>简单明了得介绍了git命令的作用</p>

<p><a href="http://pcottle.github.io/learnGitBranching/" title="LearnGitBranching">LearnGitBranching</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[转载]python汉字处理的工具]]></title>
    <link href="http://liuliyun.me/blog/2013/05/17/python_chinese_text_parser/"/>
    <updated>2013-05-17T14:10:00+08:00</updated>
    <id>http://liuliyun.me/blog/2013/05/17/python_chinese_text_parser</id>
    <content type="html"><![CDATA[<p>下面这个小工具包含了：</p>

<pre><code>判断unicode是否是汉字，数字，英文，或者其他字符。 
全角符号转半角符号。 
unicode字符串归一化等工作。 
还有一个能处理多音字的汉字转拼音的程序，还在整理中。
</code></pre>

<!--more-->


<pre><code>#!/usr/bin/env python
# -*- coding:GBK -*- 
"""汉字处理的工具:
判断unicode是否是汉字，数字，英文，或者其他字符。
全角符号转半角符号。"""
__author__="internetsweeper &lt;zhengbin0713@gmail.com&gt;"
__date__="2007-08-04"

def is_chinese(uchar):
    """判断一个unicode是否是汉字"""
    if uchar &gt;= u'\u4e00' and uchar&lt;=u'\u9fa5':
        return True
    else:
        return False

def is_number(uchar):
    """判断一个unicode是否是数字"""
    if uchar &gt;= u'\u0030' and uchar&lt;=u'\u0039':
        return True
    else:
        return False

def is_alphabet(uchar):
    """判断一个unicode是否是英文字母"""
    if (uchar &gt;= u'\u0041' and uchar&lt;=u'\u005a') or (uchar &gt;= u'\u0061' and uchar&lt;=u'\u007a'):
        return True
    else:
        return False

def is_other(uchar):
    """判断是否非汉字，数字和英文字符"""
    if not (is_chinese(uchar) or is_number(uchar) or is_alphabet(uchar)):
        return True
    else:
        return False

def B2Q(uchar):
    """半角转全角"""
    inside_code=ord(uchar)
    if inside_code&lt;0x0020 or inside_code&gt;0x7e: #不是半角字符就返回原来的字符
        return uchar
    if inside_code==0x0020: #除了空格其他的全角半角的公式为:半角=全角-0xfee0
        inside_code=0x3000
    else:
        inside_code+=0xfee0
    return unichr(inside_code)

def Q2B(uchar):
    """全角转半角"""
    inside_code=ord(uchar)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mysql建库及用户命令实例]]></title>
    <link href="http://liuliyun.me/blog/2013/05/15/mysql_create_db_user_cmd/"/>
    <updated>2013-05-15T14:10:00+08:00</updated>
    <id>http://liuliyun.me/blog/2013/05/15/mysql_create_db_user_cmd</id>
    <content type="html"><![CDATA[<p>这里记录下mysql命令行下创建库及用户的命令</p>

<!--more-->


<pre><code>&gt;mysql -u root -p

&gt;show databases;

&gt;create database new_database;

&gt;create user 'name' identified by 'pwd';

&gt;grant all privileges on new_database.* to 'name'@'localhost' identified by 'pwd' with grant option; 

&gt;quit

&gt;mysql -u name -p

&gt;show databases;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[转载] Win7系统建立并开启Wifi热点的bat批处理]]></title>
    <link href="http://liuliyun.me/blog/2013/05/13/win7_wifi_point/"/>
    <updated>2013-05-13T14:10:00+08:00</updated>
    <id>http://liuliyun.me/blog/2013/05/13/win7_wifi_point</id>
    <content type="html"><![CDATA[<p>硬件：含有无线网卡的电脑或笔记本</p>

<p>系统：Windows7内核的系统，Windows8，Windows Server 2008 等</p>

<p>目的：将Win7的无线网卡作为wifi热点，让其他含有WIFI电子设备(平板电脑，手机，笔记本)连接上笔记本共享的WIFI</p>

<!--more-->


<p>具体过程不详述了,核心代码如下：</p>

<ol>
<li><p>显示无线热点状态</p>

<pre><code> netsh wlan show hostednetwork
</code></pre></li>
<li><p>打开无线热点</p>

<pre><code> netsh wlan start hostednetwork
</code></pre></li>
<li><p>关闭无线热点</p>

<pre><code> netsh wlan stop hostednetwork
</code></pre></li>
<li><p>禁用无线热点</p>

<pre><code> netsh wlan set hostednetwork mode=disallow
</code></pre></li>
<li><p>启用无线热点</p>

<pre><code> wlan set hostednetwork mode=allow
</code></pre></li>
<li><p>更改无线热点参数（SSID/KEY）</p>

<pre><code> netsh wlan set hostednetwork mode=allow ssid=rekfan.com key=wwwrekfancom
</code></pre></li>
</ol>


<p>参数解释：</p>

<pre><code>mode:是否启用虚拟WiFi网卡，改为disallow则为禁止。
ssid:无线网名称，推荐最好用英文。（此处以rekfan.com为例，可自由设置）
key:无线网密码，限定八个以上字符。（此处以wwwrekfancom为例，可自由设置）
</code></pre>

<p>改编后的bat批处理：</p>

<pre><code>echo off
title windows 7 无线热点设置 By:REKFAN
color 1E
:main
cls
echo.
echo.       /-------------------------------
echo.       ‖     windows 7 无线热点设置    ‖
echo.       -------------------------------/
echo.
echo.            1 - 显示无线热点状态
echo.            2 - 打开无线热点
echo.            3 - 关闭无线热点
echo.            4 - 禁用无线热点
echo.            5 - 启用无线热点
echo.            6 - 更改无线热点参数（SSID/KEY）
echo.            0 - 退出
echo.-----------------------------------------------------------
echo.          首次运行请执行6      
echo.          直接回车可查看说明文档
echo.          http://blog.rekfan.com
set input=
set /p input=请选择【输入序号,然后回车】：
if /i '%input%'=='1' goto main1
if /i '%input%'=='2' goto main2
if /i '%input%'=='3' goto main3
if /i '%input%'=='4' goto main4
if /i '%input%'=='5' goto main5
if /i '%input%'=='6' goto main6
if /i '%input%'=='0' goto end
cls
echo.
pause
goto main

:end
set ssid=
set key=
exit

:main1
cls
echo 系统当前无线热点状态
echo.
netsh wlan show hostednetwork
echo.
pause
goto main

:main2
cls
echo 打开无线热点
echo.
netsh wlan start hostednetwork
echo.
pause
goto main1

:main3
cls
echo 关闭无线热点
echo.
netsh wlan stop hostednetwork
echo.
pause
goto main1

:main4
cls
echo 禁用无线热点
echo.
netsh wlan set hostednetwork mode=disallow
echo.
pause
goto main1

:main5
cls
echo 启用无线热点
echo.
netsh wlan set hostednetwork mode=allow
pause
goto main2

:main6
cls
echo 更改无线热点参数（SSID/KEY）
echo.
netsh wlan stop hostednetwork
echo.
set ssid=
set /p ssid=请输入热点名称：
echo.
set key=
set /p key=请输入网络密码(8位以上)：
echo.
netsh wlan set hostednetwork mode=allow ssid=%ssid% key=%key%
pause
goto main2
</code></pre>

<p>使用步骤：</p>

<ol>
<li>将上面代码保存在记事本里，改名更改为<em>.bat(</em>随便写，比如：Win7_Wifi.bat)</li>
<li>初次使用，运行bat,输入6</li>
<li>打开“网络和共享中心”&mdash;“更改适配器设置”看看是不是多了一项，如果有多出的这一项“Microsoft Virtual WiFi Miniport Adapter”，那么说明你前边的设置是正确的。</li>
<li>设置Internet连接共享：在“网络连接”窗口中，右键单击已连接到Internet的网络连接(一般是“本地连接”)，选择“属性”→“共享”，勾上“允许其他······连接(N)”并选择刚才新建的虚拟连接。<a href="http://blog.rekfan.com/?p=226">http://blog.rekfan.com/?p=226</a></li>
<li>到此，基本上可以使用其他设备连接wifi上网了！</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sae python 微信公众项目单元测试框架]]></title>
    <link href="http://liuliyun.me/blog/2013/05/13/python_weixin_sae_unitest_frame/"/>
    <updated>2013-05-13T14:10:00+08:00</updated>
    <id>http://liuliyun.me/blog/2013/05/13/python_weixin_sae_unitest_frame</id>
    <content type="html"><![CDATA[<p>开发的伴侣就是单元测试，没有测试用例的开发，或者说是没有自动测试的开发是噩梦般的。</p>

<p>在sae python微信公众项目的开发过程中，建立单元测试框架可以大大提高开发效性、项目的稳定性。</p>

<!--more-->


<p>下面提供我自己使用的简单sae python测试框架(weixin_unitest.py)：</p>

<pre><code>﻿# -*- coding: utf-8 -*-
#/usr/bin/env python


import sys, urllib, httplib, time, hashlib, random

# 配置
interface_url = '***.sinaapp.com:80' # 注意不能加http://
interface_path = '/your path'
Token = 'your token'

messages = {
    # 用户关注消息
    'subscribe' : '''&lt;xml&gt;&lt;ToUserName&gt;&lt;![CDATA[your name]]&gt;&lt;/ToUserName&gt;
    &lt;FromUserName&gt;&lt;![CDATA[tester name]]&gt;&lt;/FromUserName&gt;
    &lt;CreateTime&gt;123456789&lt;/CreateTime&gt;
    &lt;MsgType&gt;&lt;![CDATA[event]]&gt;&lt;/MsgType&gt;
    &lt;Event&gt;&lt;![CDATA[subscribe]]&gt;&lt;/Event&gt;
    &lt;EventKey&gt;&lt;![CDATA[EVENTKEY]]&gt;&lt;/EventKey&gt;
    &lt;/xml&gt;''',

    # 用户发送文本信息
    'text': '''&lt;xml&gt;&lt;ToUserName&gt;&lt;![CDATA[your name]]&gt;&lt;/ToUserName&gt;
    &lt;FromUserName&gt;&lt;![CDATA[test name]]&gt;&lt;/FromUserName&gt; 
    &lt;CreateTime&gt;1348831860&lt;/CreateTime&gt;
    &lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;/MsgType&gt;
    &lt;Content&gt;&lt;![CDATA[test text]]&gt;&lt;/Content&gt;
    &lt;MsgId&gt;1234567890123456&lt;/MsgId&gt;
    &lt;/xml&gt;'''

}

def make_post(action):
    '''模拟用户行为产生的消息提交给接口程序'''

    conn = httplib.HTTPConnection(interface_url)

    headers = { "Content-type": "text/xml",
                "Content-Length": "%d" % len(messages[action])}

    # 生成签名相关变量
    timestamp = int(time.time())

    nonce = random.randint(1,100000)

    signature = makeSignature(Token, timestamp, nonce)

    params = urllib.urlencode({'signature': signature, 'timestamp': timestamp, 'nonce': nonce})

    conn.request("POST", interface_path + "?" +params, "", headers)

    print messages[action]
    conn.send(messages[action])

    response = conn.getresponse()

    print response.status, response.reason

    print response.read()

    conn.close()



def makeSignature(Token, timestamp, nonce):
    '''生成签名'''
    try:
        Token = int(Token)
    except Exception, e:
        pass

    sorted_arr = map(str, sorted([Token, timestamp, nonce]))

    sha1obj = hashlib.sha1()
    sha1obj.update(''.join(sorted_arr))
    hash = sha1obj.hexdigest()

    return hash

def listAction():
    print("======Supported actions:======")
    for i in messages.keys():
        print(i)
    print("==============================")

if __name__ == '__main__':
    if len(sys.argv) &lt; 2:   
        print (u"Please input your action")
        listAction()
    else:
        if (messages.has_key(sys.argv[1])):
            make_post(sys.argv[1])
        else:
            print("No this action")
            listAction()
</code></pre>

<p>运行：</p>

<pre><code>python weixin_unitest.py subscribe
python weixin_unitest.py text
</code></pre>

<p>结合SAEPython（sae服务器），在本地完成开发测试就很方便了。</p>

<h1>广告</h1>

<p>关注易生活，关注微信公众：EasyTool</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python日期字符串解析]]></title>
    <link href="http://liuliyun.me/blog/2013/05/13/python_datestr_parser/"/>
    <updated>2013-05-13T14:10:00+08:00</updated>
    <id>http://liuliyun.me/blog/2013/05/13/python_datestr_parser</id>
    <content type="html"><![CDATA[<p>用python + 正则表达式 实现的日期字符串解析工具：</p>

<!--more-->


<pre><code># -*- coding: utf-8 -*-
#
# 关注易生活，我是小E
# 微信：EasyTool
#
import re
from datetime import date


DATE_PATTERNS = {
u'2013-05-16':u'^(\d{4})[\-\/\.年](\d{1,2})[\-\/\.月](\d{1,2})日{,1}',
u'20130516':u'^(\d{4})(\d{1,2})(\d{1,2})',
u'2013-05':u'^(\d{4})[\-\/\.年](\d{1,2})[\-\/\.月]{,1}()',
u'2013':u'^(\d{4})[\-\/\.年]{,1}()()',
u'05月':u'^()(\d{1,2})[月]()',
u'05-16':u'^()(\d{1,2})[\-\/\.月](\d{1,2})日{,1}'
}

DATE_PATTERNS_TEST = [
u'2013-05-16',
u'2013年05月16',
u'2013年05月16日',

u'20130516',

u'2013-05', 
u'2013年05', 
u'2013-05月',

u'2013',
u'2013年',

u'05月',

u'05-16',
u'05月16',
u'05月16日',

u'05'
]


LANG_PRINT = 'utf-8'

def parse_date(dt_str):
    year, month, day = u'', u'', u''

    for pat_key in DATE_PATTERNS.keys():
        dt_arrs = re.findall(DATE_PATTERNS[pat_key], dt_str)
        if len(dt_arrs)&gt;0:
            dt_arr = dt_arrs[0]
            if len(dt_arr)&gt;0: year  = dt_arr[0]
            if len(dt_arr)&gt;1: month = dt_arr[1]
            if len(dt_arr)&gt;2: day   = dt_arr[2]
            break

    return year, month, day

def test_all():
    for dt_str in DATE_PATTERNS_TEST:
        dt_tuple = parse_date(dt_str)
        if dt_tuple is not None:
            print u'dt_str {0} parse result: {1} {2} {3}'.format(dt_str, dt_tuple[0], dt_tuple[1], dt_tuple[2]).encode(LANG_PRINT)
        else:
            print u'error date format {0}'.format(dt_str).encode(LANG_PRINT)


if __name__ == '__main__':
    test_all()
</code></pre>

<h1>期间遇到问题：</h1>

<p>print 内容需要是utf-8格式，否则会异常</p>

<p>print是标准输出sys.stdout</p>

<p>查看标准输出的编码：  print sys.stdout.encoding</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[svn目录的拷贝方法]]></title>
    <link href="http://liuliyun.me/blog/2013/05/13/linux_svn_moveto/"/>
    <updated>2013-05-13T14:10:00+08:00</updated>
    <id>http://liuliyun.me/blog/2013/05/13/linux_svn_moveto</id>
    <content type="html"><![CDATA[<p>svn目录中都有一个隐藏目录&#8221;.svn&#8221;，这给复制带来不便。</p>

<p>记录下拷贝目录时过滤文件的方法：</p>

<h1>当不需要的文件类型较为单一时</h1>

<p>可以通过完全复制然后删除指定类型的文件完成</p>

<pre><code>cp -r test/ test2
find test2/ -name '.svn' | xargs rm -rf
</code></pre>

<p>xargs是给命令传递参数的一个过滤器，可以将前一个命令产生的输出作为后一个命令的参数</p>

<h1>需要的文件为单一类型</h1>

<p>带目录结构复制</p>

<pre><code>mkdir test3
find test/ -name '*.txt' | xargs tar czf test3.tgz
tar zxvf test3.tgz -C test3
</code></pre>

<p>tree 命令可以查看目录树形结构</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hello sae python]]></title>
    <link href="http://liuliyun.me/blog/2013/05/10/sae_python_helloworld/"/>
    <updated>2013-05-10T14:10:00+08:00</updated>
    <id>http://liuliyun.me/blog/2013/05/10/sae_python_helloworld</id>
    <content type="html"><![CDATA[<p>看看如何在sae上部署第一个python应用吧</p>

<!--more-->


<p>首先在sae上创建一个python应用</p>

<p>创建好后其实是没有完成创建的，无法进行代码管理</p>

<p>需要先svn签出、签入</p>

<p>SAE采用svn来作为代码部署工具</p>

<ol>
<li><p>检出应用helloworld目录</p>

<pre><code> svn co https://svn.sinaapp.com/helloworld
</code></pre></li>
<li><p>创建版本目录</p>

<p> 进入helloworld目录，创建一个目录1作为默认版本，切换到目录1。</p>

<pre><code> cd helloworld
 ~/helloworld$ mkdir 1
 ~/helloworld$ cd 1
</code></pre></li>
<li><p>创建应用配置文件config.yaml，内容如下：</p>

<pre><code> name: helloworld
 version: 1
</code></pre></li>
<li><p>创建index.wsgi，内容如下：</p>

<pre><code> import sae

 def app(environ, start_response):
     status = '200 OK'
     response_headers = [('Content-type', 'text/plain')]
     start_response(status, response_headers)
     return ['Hello, world!']

 application = sae.create_wsgi_app(app)
</code></pre></li>
<li><p>部署应用</p>

<p> 提交刚刚编辑的代码，就可以完成应用在SAE上的部署。</p>

<pre><code> svn add 1/
 ~/helloworld$ svn ci -m "initialize project"
</code></pre></li>
</ol>

]]></content>
  </entry>
  
</feed>
