<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | 励 耘]]></title>
  <link href="http://liuliyun.me/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://liuliyun.me/"/>
  <updated>2013-07-06T13:16:23+08:00</updated>
  <id>http://liuliyun.me/</id>
  <author>
    <name><![CDATA[LynnLiu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[浅析Werkzeug服务无缝更新]]></title>
    <link href="http://liuliyun.me/blog/2013/06/27/qian-xi-Werkzeug-fu-wu-wufeng-geng-xin/"/>
    <updated>2013-06-27T22:56:00+08:00</updated>
    <id>http://liuliyun.me/blog/2013/06/27/qian-xi-Werkzeug-fu-wu-wufeng-geng-xin</id>
    <content type="html"><![CDATA[<p>一直以来对于SAE上python应用无缝更新好奇</p>

<p>今天就来分析一下</p>

<!--more-->


<h1>应用启动入口</h1>

<p>我用的是Flask</p>

<p>从dev_server.py中 WsgiWorker可以找到运行服务的入口：</p>

<pre><code>    from werkzeug.serving import run_simple
    run_simple(...)
</code></pre>

<p>注意其中参数： <strong><em>use_reloader = True</em></strong>，后面会分析到</p>

<h1>带重启功能启动</h1>

<p>use_reloader条件决定了直接启动服务还是带有自动重启功能启动</p>

<pre><code>def run_with_reloader(main_func, extra_files=None, interval=1):
"""Run the given function in an independent python interpreter."""
# ********如果是真正需要运行的进程********
if os.environ.get('WERKZEUG_RUN_MAIN') == 'true':
    # ********启动服务线程********
    thread.start_new_thread(main_func, ())
    try:
        # ********检测文件变化并重启********
        reloader_loop(extra_files, interval)
    except KeyboardInterrupt:
        return
try:
    # ********第一次启动，按reloader方式启动子进程********
    sys.exit(restart_with_reloader())
except KeyboardInterrupt:
    pass


def restart_with_reloader():
    """Spawn a new Python interpreter with the same arguments as this one,
    but running the reloader thread.
    """
    while 1:
        _log('info', ' * Restarting with reloader...')
        args = [sys.executable] + sys.argv
        new_environ = os.environ.copy()

        # ********标记当前启动为真正要运行的进程********
        new_environ['WERKZEUG_RUN_MAIN'] = 'true'

        # a weird bug on windows. sometimes unicode strings end up in the
        # environment and subprocess.call does not like this, encode them
        # to latin1 and continue.
        if os.name == 'nt':
            for key, value in new_environ.iteritems():
                if isinstance(value, unicode):
                    new_environ[key] = value.encode('iso-8859-1')

        # ********创建新的子进程，执行参数和当前进程一致********
        # ********应该是直到子进程退出才会返回********
        exit_code = subprocess.call(args, env=new_environ)
        if exit_code != 3:
            return exit_code
</code></pre>

<h1>问题</h1>

<p>通过以上分析，解释了我在本地起SAEPython服务时，通过日志，看到应用被初始化两次的原因</p>

<p>第二次启动有这么一条日志：</p>

<pre><code>     * Restarting with reloader...
</code></pre>

<p>这让的话，初始应用初始化过两次，而第一次初始化的应用没有用</p>

<p>如何解决这个问题呢？</p>

<h1>解决应用实例化两个的问题</h1>

<ol>
<li>创建一个启动应用</li>
<li>由这个启动应用以自动重启方式启动真实应用</li>
</ol>


<p>同真实模块一样创建一个启动应用模块dummy</p>

<pre><code>realapp/
  |
  - __init__.py
dummy/
  |
  - __init__.py
</code></pre>

<p>index.wsgi文件这么写</p>

<pre><code>    import sae, os

    if os.environ.get('WERKZEUG_RUN_MAIN') == 'true':
        print 'realy application'
        from realapp import app
        application = sae.create_wsgi_app(app)
    else:
        print 'dummy application'
        from dummy import dummy_app
        application = sae.create_wsgi_app(dummy_app)
</code></pre>

<p>这样在本地启动SAEPython，应用创建两个实例的问题就解决了。</p>

<h1>遗留问题</h1>

<p>发布到SAE后，以上方法不生效</p>

<pre><code>os.environ.get('WERKZEUG_RUN_MAIN') != 'true'
</code></pre>

<p>有知道原因的吗？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python程序监视自身退出]]></title>
    <link href="http://liuliyun.me/blog/2013/06/27/python_atexit_register/"/>
    <updated>2013-06-27T14:10:00+08:00</updated>
    <id>http://liuliyun.me/blog/2013/06/27/python_atexit_register</id>
    <content type="html"><![CDATA[<p>SAE上更新代码时，服务都可以无缝切换，无需人工重启服务</p>

<p>那么，怎么能够在服务重启前进行持久化操作呢</p>

<p>需要监视服务何时重启</p>

<p>python提供了一个绑定程序退出时处理函数的功能[<a href="http://docs.python.org/2/library/atexit.html">参考</a>]：</p>

<pre><code>atexit.register(func[, *args[, **kargs]])
</code></pre>

<!-- more -->


<p>程序结束，如调用sys.exit() 或者主模块执行结束时，就会执行注册的clean functions</p>

<pre><code>def goodbye():
    print 'Bye...'

atexit.register(goodbye)
</code></pre>

<p>需要注意的是，可以重复注册相同的clean functions，这可能是我们不希望的，以下方法可以防止重复注册：</p>

<pre><code>def goodbye():
    print 'Bye...'

for idx, handler in enumerate(atexit._exithandlers):
    if handler[0].func_name == 'goodbye':
        del atexit._exithandlers[idx]
        break

atexit.register(goodbye)
print atexit._exithandlers
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在SAE分布式服务上开发需要解决的问题]]></title>
    <link href="http://liuliyun.me/blog/2013/06/22/sae_distribute_dev_app/"/>
    <updated>2013-06-22T14:10:00+08:00</updated>
    <id>http://liuliyun.me/blog/2013/06/22/sae_distribute_dev_app</id>
    <content type="html"><![CDATA[<p>这是在开发“幸运猜数”微信游戏的时候遇到的问题</p>

<p>对游戏感兴趣的，可以关注微信公众ID: EasyTool</p>

<p>回复【幸运猜数】开始游戏</p>

<!-- more -->


<hr />

<p>之前提供的功能：【黄金】【双色球】【记事】等，都是无状态服务</p>

<p>而开发一款游戏，必然要求服务是有状态的</p>

<p>这样在SAE上的分布式环境下，还继续沿用无状态服务开发方式，必然遇到：</p>

<ol>
<li>分布式服务对于请求，会进行负载均衡分配</li>
<li>在A服务器开始游戏，游戏操作被发到B服务器了</li>
<li>于是，B服务器不知道玩家要做什么</li>
<li>玩家发了好多开始游戏请求，结果同时在A、B服务器开始游戏，玩家体验就错乱了</li>
</ol>


<p>那么，如何在SAE上开发有状态的应用呢？</p>

<p>宗旨就是：<strong>数据一致性保证</strong></p>

<p>设计思路：</p>

<ol>
<li>各分布服务共享关键数据</li>
<li>需要时同步关键数据</li>
<li>变化时更新关键数据</li>
</ol>


<p>SAE提供了如下数据共享方式：</p>

<ol>
<li>数据库</li>
<li>分布式session</li>
<li>分布式memcache</li>
</ol>


<p>python开发，我选择了分布式memcache，采用pylibmc包</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python中调用父类的同名方法]]></title>
    <link href="http://liuliyun.me/blog/2013/06/08/python_how_to_invoke_same_method_in_baseclass/"/>
    <updated>2013-06-08T18:10:00+08:00</updated>
    <id>http://liuliyun.me/blog/2013/06/08/python_how_to_invoke_same_method_in_baseclass</id>
    <content type="html"><![CDATA[<p>面向对象设计时，无可避免的会涉及到父类和子类的关系</p>

<p>封装、集成、多态，大家都能娓娓道来</p>

<p>道理是一样的，针对不同的语言，面向对象开发也会遇到不同情况需要解决</p>

<p>今天学习下python中如何调用父类同名方法</p>

<!-- more -->


<p>PS： 如果不调用的话，子类同名方法对父类方法是直接覆盖的</p>

<h2>python 2.2以前</h2>

<pre><code>class FooParent:
    def bar(self, message):
        print(message)

class FooChild(FooParent):
    def bar(self, message):
        FooParent.bar(self, message)

&gt;&gt;&gt; FooChild().bar("Hello, World.")
Hello, World.
</code></pre>

<p>缺点：</p>

<ul>
<li><p>要修改父类名称时，麻烦</p></li>
<li><p>多级、多继承时，基类方法会多次执行</p></li>
</ul>


<h2>2.2 以后</h2>

<pre><code>class FooParent:
    def bar(self, message):
        print(message)


class FooChild(FooParent):
    def bar(self, message):
        super(FooChild, self).bar(message)


&gt;&gt;&gt; FooChild().bar("Hello, World.")
Hello, World.
</code></pre>

<p>优点：</p>

<ul>
<li>基类名称想怎么改就怎么改了</li>
<li>多继承，不会多次调用基类方法</li>
</ul>


<p>参考：<a href="http://hi.baidu.com/thinkinginlamp/item/3095e2f52c642516ce9f32d5">如何在Python中调用父类的同名方法</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解析网页抓取所得gzip压缩数据]]></title>
    <link href="http://liuliyun.me/blog/2013/06/06/python_gzip_response_data_parse/"/>
    <updated>2013-06-06T14:10:00+08:00</updated>
    <id>http://liuliyun.me/blog/2013/06/06/python_gzip_response_data_parse</id>
    <content type="html"><![CDATA[<p>在进行网页数据抓取时，会遇到压缩数据，可能主要出于如下考虑：</p>

<ol>
<li><p>简单的防抓取方法</p>

<p> 没有经过分析就对抓取的网页内容直接进行文本解析，肯定会遇到问题，就像我开始的时候一样。。。</p></li>
<li><p>压缩数据减少流量</p>

<p> 这个一般用于提供数据接口，将数据压缩后可以大大减少流量</p></li>
</ol>


<p>以下提供对抓取数据的处理方法：</p>

<!-- more -->


<ol>
<li><p>检测反馈内容是否压缩，并对压缩内容解压</p></li>
<li><p>检测数据文本编码格式，解压后返回unicode文本</p></li>
</ol>


<p>检测编码格式所用工具：<a href="https://pypi.python.org/pypi/chardet">chardet</a></p>

<pre><code># -*- coding: utf-8 -*-

import gzip, StringIO, codecs, chardet
from utils import *

def getEncoding(txt):
    """ 检查文本内容的编码方式
    """
    try:
        coding = chardet.detect(txt)['encoding']

        if 'None' == coding:
            return None
        else:
            return coding

    except Exception as ex:
        print 'fail getEncoding {0}'.format(ex)
        return None

def readResponse(resp):
    """ 读取网页抓取返回内容
    """
    if resp.getcode() == 200:
        encoding = resp.headers.get('Content-Encoding')

        info = resp.read()

        if('gzip' == encoding):
            print 'read response compress gzip'
            try:
                gf = gzip.GzipFile(fileobj=StringIO.StringIO(info), mode="r")
                info = gf.read()
            except Exception as ex:
                print 'fail read response, gzip'
                info = ''

    if info!='':
        # 删除BOM头
        info = info.strip(codecs.BOM_UTF8)
        code = getEncoding(info)
        if code:
            info = info.decode(code)
            print 'read response, encoding {0}'.format(code)
        else:
            print 'fail parse text encode'

    return info
</code></pre>

<p>参考链接：</p>

<ol>
<li><a href="http://www.diveintopython.net/http_web_services/gzip_compression.html">Handling compressed data</a></li>
<li><a href="http://blog.knownsec.com/2012/04/about-content-encoding-gzip/">关于 Content-Encoding: gzip</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
