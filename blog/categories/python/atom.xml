<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | EasyTool's Blog]]></title>
  <link href="http://liuliyun.me/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://liuliyun.me/"/>
  <updated>2013-06-29T19:13:49+08:00</updated>
  <id>http://liuliyun.me/</id>
  <author>
    <name><![CDATA[LynnLiu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[浅析Werkzeug服务无缝更新]]></title>
    <link href="http://liuliyun.me/blog/2013/06/27/qian-xi-Werkzeug-fu-wu-wufeng-geng-xin/"/>
    <updated>2013-06-27T22:56:00+08:00</updated>
    <id>http://liuliyun.me/blog/2013/06/27/qian-xi-Werkzeug-fu-wu-wufeng-geng-xin</id>
    <content type="html"><![CDATA[<p>一直以来对于SAE上python应用无缝更新好奇</p>

<p>今天就来分析一下</p>

<!--more-->


<h1>应用启动入口</h1>

<p>我用的是Flask</p>

<p>从dev_server.py中 WsgiWorker可以找到运行服务的入口：</p>

<pre><code>    from werkzeug.serving import run_simple
    run_simple(...)
</code></pre>

<p>注意其中参数： <strong><em>use_reloader = True</em></strong>，后面会分析到</p>

<h1>带重启功能启动</h1>

<p>use_reloader条件决定了直接启动服务还是带有自动重启功能启动</p>

<pre><code>def run_with_reloader(main_func, extra_files=None, interval=1):
"""Run the given function in an independent python interpreter."""
# ********如果是真正需要运行的进程********
if os.environ.get('WERKZEUG_RUN_MAIN') == 'true':
    # ********启动服务线程********
    thread.start_new_thread(main_func, ())
    try:
        # ********检测文件变化并重启********
        reloader_loop(extra_files, interval)
    except KeyboardInterrupt:
        return
try:
    # ********第一次启动，按reloader方式启动子进程********
    sys.exit(restart_with_reloader())
except KeyboardInterrupt:
    pass


def restart_with_reloader():
    """Spawn a new Python interpreter with the same arguments as this one,
    but running the reloader thread.
    """
    while 1:
        _log('info', ' * Restarting with reloader...')
        args = [sys.executable] + sys.argv
        new_environ = os.environ.copy()

        # ********标记当前启动为真正要运行的进程********
        new_environ['WERKZEUG_RUN_MAIN'] = 'true'

        # a weird bug on windows. sometimes unicode strings end up in the
        # environment and subprocess.call does not like this, encode them
        # to latin1 and continue.
        if os.name == 'nt':
            for key, value in new_environ.iteritems():
                if isinstance(value, unicode):
                    new_environ[key] = value.encode('iso-8859-1')

        # ********创建新的子进程，执行参数和当前进程一致********
        # ********应该是直到子进程退出才会返回********
        exit_code = subprocess.call(args, env=new_environ)
        if exit_code != 3:
            return exit_code
</code></pre>

<h1>问题</h1>

<p>通过以上分析，解释了我在本地起SAEPython服务时，通过日志，看到应用被初始化两次的原因</p>

<p>第二次启动有这么一条日志：</p>

<pre><code>     * Restarting with reloader...
</code></pre>

<p>这让的话，初始应用初始化过两次，而第一次初始化的应用没有用</p>

<p>如何解决这个问题呢？</p>

<h1>解决应用实例化两个的问题</h1>

<ol>
<li>创建一个启动应用</li>
<li>由这个启动应用以自动重启方式启动真实应用</li>
</ol>


<p>同真实模块一样创建一个启动应用模块dummy</p>

<pre><code>realapp/
  |
  - __init__.py
dummy/
  |
  - __init__.py
</code></pre>

<p>index.wsgi文件这么写</p>

<pre><code>    import sae, os

    if os.environ.get('WERKZEUG_RUN_MAIN') == 'true':
        print 'realy application'
        from realapp import app
        application = sae.create_wsgi_app(app)
    else:
        print 'dummy application'
        from dummy import dummy_app
        application = sae.create_wsgi_app(dummy_app)
</code></pre>

<p>这样在本地启动SAEPython，应用创建两个实例的问题就解决了。</p>

<h1>遗留问题</h1>

<p>发布到SAE后，以上方法不生效</p>

<pre><code>os.environ.get('WERKZEUG_RUN_MAIN') != 'true'
</code></pre>

<p>有知道原因的吗？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python中调用父类的同名方法]]></title>
    <link href="http://liuliyun.me/blog/2013/06/08/python_how_to_invoke_same_method_in_baseclass/"/>
    <updated>2013-06-08T18:10:00+08:00</updated>
    <id>http://liuliyun.me/blog/2013/06/08/python_how_to_invoke_same_method_in_baseclass</id>
    <content type="html"><![CDATA[<p>面向对象设计时，无可避免的会涉及到父类和子类的关系</p>

<p>封装、集成、多态，大家都能娓娓道来</p>

<p>道理是一样的，针对不同的语言，面向对象开发也会遇到不同情况需要解决</p>

<p>今天学习下python中如何调用父类同名方法</p>

<!-- more -->


<p>PS： 如果不调用的话，子类同名方法对父类方法是直接覆盖的</p>

<h2>python 2.2以前</h2>

<pre><code>class FooParent:
    def bar(self, message):
        print(message)

class FooChild(FooParent):
    def bar(self, message):
        FooParent.bar(self, message)

&gt;&gt;&gt; FooChild().bar("Hello, World.")
Hello, World.
</code></pre>

<p>缺点：</p>

<ul>
<li><p>要修改父类名称时，麻烦</p></li>
<li><p>多级、多继承时，基类方法会多次执行</p></li>
</ul>


<h2>2.2 以后</h2>

<pre><code>class FooParent:
    def bar(self, message):
        print(message)


class FooChild(FooParent):
    def bar(self, message):
        super(FooChild, self).bar(message)


&gt;&gt;&gt; FooChild().bar("Hello, World.")
Hello, World.
</code></pre>

<p>优点：</p>

<ul>
<li>基类名称想怎么改就怎么改了</li>
<li>多继承，不会多次调用基类方法</li>
</ul>


<p>参考：<a href="http://hi.baidu.com/thinkinginlamp/item/3095e2f52c642516ce9f32d5">如何在Python中调用父类的同名方法</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解析网页抓取所得gzip压缩数据]]></title>
    <link href="http://liuliyun.me/blog/2013/06/06/python_gzip_response_data_parse/"/>
    <updated>2013-06-06T14:10:00+08:00</updated>
    <id>http://liuliyun.me/blog/2013/06/06/python_gzip_response_data_parse</id>
    <content type="html"><![CDATA[<p>在进行网页数据抓取时，会遇到压缩数据，可能主要出于如下考虑：</p>

<ol>
<li><p>简单的防抓取方法</p>

<p> 没有经过分析就对抓取的网页内容直接进行文本解析，肯定会遇到问题，就像我开始的时候一样。。。</p></li>
<li><p>压缩数据减少流量</p>

<p> 这个一般用于提供数据接口，将数据压缩后可以大大减少流量</p></li>
</ol>


<p>以下提供对抓取数据的处理方法：</p>

<!-- more -->


<ol>
<li><p>检测反馈内容是否压缩，并对压缩内容解压</p></li>
<li><p>检测数据文本编码格式，解压后返回unicode文本</p></li>
</ol>


<p>检测编码格式所用工具：<a href="https://pypi.python.org/pypi/chardet">chardet</a></p>

<pre><code># -*- coding: utf-8 -*-

import gzip, StringIO, codecs, chardet
from utils import *

def getEncoding(txt):
    """ 检查文本内容的编码方式
    """
    try:
        coding = chardet.detect(txt)['encoding']

        if 'None' == coding:
            return None
        else:
            return coding

    except Exception as ex:
        print 'fail getEncoding {0}'.format(ex)
        return None

def readResponse(resp):
    """ 读取网页抓取返回内容
    """
    if resp.getcode() == 200:
        encoding = resp.headers.get('Content-Encoding')

        info = resp.read()

        if('gzip' == encoding):
            print 'read response compress gzip'
            try:
                gf = gzip.GzipFile(fileobj=StringIO.StringIO(info), mode="r")
                info = gf.read()
            except Exception as ex:
                print 'fail read response, gzip'
                info = ''

    if info!='':
        # 删除BOM头
        info = info.strip(codecs.BOM_UTF8)
        code = getEncoding(info)
        if code:
            info = info.decode(code)
            print 'read response, encoding {0}'.format(code)
        else:
            print 'fail parse text encode'

    return info
</code></pre>

<p>参考链接：</p>

<ol>
<li><a href="http://www.diveintopython.net/http_web_services/gzip_compression.html">Handling compressed data</a></li>
<li><a href="http://blog.knownsec.com/2012/04/about-content-encoding-gzip/">关于 Content-Encoding: gzip</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python 字符串编码]]></title>
    <link href="http://liuliyun.me/blog/2013/05/30/python_string_codec/"/>
    <updated>2013-05-30T14:10:00+08:00</updated>
    <id>http://liuliyun.me/blog/2013/05/30/python_string_codec</id>
    <content type="html"><![CDATA[<p>在pythong开发过程中经常遇到编码问题，原因在于没有正确理解编码解码过程</p>

<p>通过以下命令过程帮助理解下，各自体会吧。</p>

<!--more-->


<p>宗旨：<strong>由Unicode中转进行编码、解码</strong></p>

<pre><code>&gt;&gt;&gt; u = '\uffef'
&gt;&gt;&gt; print u
\uffef
&gt;&gt;&gt; u = u'\uffef'
&gt;&gt;&gt; print u
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeEncodeError: 'gbk' codec can't encode character u'\uffef' in position 0: illegal multibyte sequence
&gt;&gt;&gt; str(u)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeEncodeError: 'ascii' codec can't encode character u'\uffef' in position 0: ordinal not in range(128)
&gt;&gt;&gt; sys.stdout.encoding
'cp936'
&gt;&gt;&gt; x = u.encode('utf-8')
&gt;&gt;&gt; x
'\xef\xbf\xaf'
&gt;&gt;&gt; x.decode('utf-8')
u'\uffef'
&gt;&gt;&gt; x.encode('utf-8')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeDecodeError: 'ascii' codec can't decode byte 0xef in position 0: ordinal not in range(128)
&gt;&gt;&gt; u.decode('utf-8')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "E:\Program Files\Python27\lib\encodings\utf_8.py", line 16, in decode
    return codecs.utf_8_decode(input, errors, True)
UnicodeEncodeError: 'ascii' codec can't encode character u'\uffef' in position 0: ordinal not in range(128)
&gt;&gt;&gt; u.encode('utf-8')
'\xef\xbf\xaf'

&gt;&gt;&gt; print x
锟
&gt;&gt;&gt; str(x)
'\xef\xbf\xaf'
&gt;&gt;&gt; repr(x)
"'\\xef\\xbf\\xaf'"
&gt;&gt;&gt; repr(u)
"u'\\uffef'"
&gt;&gt;&gt; repr(str)
"&lt;type 'str'&gt;"
&gt;&gt;&gt; repr(unicode)
"&lt;type 'unicode'&gt;"

&gt;&gt;&gt; unicode(x)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeDecodeError: 'ascii' codec can't decode byte 0xef in position 0: ordinal not in range(128)
&gt;&gt;&gt; unicode(u)
u'\uffef'
&gt;&gt;&gt; isinstance(u, str)
False
&gt;&gt;&gt; isinstance(u, unicode)
True
&gt;&gt;&gt; isinstance(x, str)
True
&gt;&gt;&gt; isinstance(x, unicode)
False

&gt;&gt;&gt; import re
&gt;&gt;&gt; re.search(u'\uff', u)
  File "&lt;stdin&gt;", line 1
SyntaxError: (unicode error) 'unicodeescape' codec can't decode bytes in position 0-XXX escape
&gt;&gt;&gt; re.search(u'ff', u)
&gt;&gt;&gt; re.search(r'\uff', u)
&gt;&gt;&gt; re.search(ur'\uff', u)
  File "&lt;stdin&gt;", line 1
SyntaxError: (unicode error) 'rawunicodeescape' codec can't decode bytes in position\uXXXX



&gt;&gt;&gt; len(None)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: object of type 'NoneType' has no len()
&gt;&gt;&gt; len('aaa')
3
&gt;&gt;&gt; len([])
0
&gt;&gt;&gt; len(())
0
&gt;&gt;&gt; len({})
0
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python webservice调用-suds]]></title>
    <link href="http://liuliyun.me/blog/2013/05/22/python_webservice_suds/"/>
    <updated>2013-05-22T14:10:00+08:00</updated>
    <id>http://liuliyun.me/blog/2013/05/22/python_webservice_suds</id>
    <content type="html"><![CDATA[<p>python也可以调用webservice : suds</p>

<!--more-->


<p>在本地sae中可以运行</p>

<pre><code>    from suds.client import Client
    url =  "http://host:port/service.wsdl"  

    #根据wsdl创建一个WebService的Client  
    client = Client(url)

    # 查看webservice提供的服务
    print client

    # 调用接口
    client.service.Interface(...)

    # 构造复杂数据
    monitor1 = client.factory.create('MonitorEntry')
</code></pre>

<p>但是上传sae后，运行失败</p>

<pre><code>。suds需要写临时文件，应该是wsdl文件
。找了个解决办法：
    在suds/cache.py中用 
。但是sae声称 get_tmp_dir 暂不支持
</code></pre>
]]></content>
  </entry>
  
</feed>
