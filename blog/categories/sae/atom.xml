<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: sae | EasyTool's Blog]]></title>
  <link href="http://liuliyun.me/blog/categories/sae/atom.xml" rel="self"/>
  <link href="http://liuliyun.me/"/>
  <updated>2013-06-28T22:16:56+08:00</updated>
  <id>http://liuliyun.me/</id>
  <author>
    <name><![CDATA[LynnLiu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[sae python 微信公众项目单元测试框架]]></title>
    <link href="http://liuliyun.me/blog/2013/05/13/python_weixin_sae_unitest_frame/"/>
    <updated>2013-05-13T14:10:00+08:00</updated>
    <id>http://liuliyun.me/blog/2013/05/13/python_weixin_sae_unitest_frame</id>
    <content type="html"><![CDATA[<p>开发的伴侣就是单元测试，没有测试用例的开发，或者说是没有自动测试的开发是噩梦般的。</p>

<p>在sae python微信公众项目的开发过程中，建立单元测试框架可以大大提高开发效性、项目的稳定性。</p>

<!--more-->


<p>下面提供我自己使用的简单sae python测试框架(weixin_unitest.py)：</p>

<pre><code>﻿# -*- coding: utf-8 -*-
#/usr/bin/env python


import sys, urllib, httplib, time, hashlib, random

# 配置
interface_url = '***.sinaapp.com:80' # 注意不能加http://
interface_path = '/your path'
Token = 'your token'

messages = {
    # 用户关注消息
    'subscribe' : '''&lt;xml&gt;&lt;ToUserName&gt;&lt;![CDATA[your name]]&gt;&lt;/ToUserName&gt;
    &lt;FromUserName&gt;&lt;![CDATA[tester name]]&gt;&lt;/FromUserName&gt;
    &lt;CreateTime&gt;123456789&lt;/CreateTime&gt;
    &lt;MsgType&gt;&lt;![CDATA[event]]&gt;&lt;/MsgType&gt;
    &lt;Event&gt;&lt;![CDATA[subscribe]]&gt;&lt;/Event&gt;
    &lt;EventKey&gt;&lt;![CDATA[EVENTKEY]]&gt;&lt;/EventKey&gt;
    &lt;/xml&gt;''',

    # 用户发送文本信息
    'text': '''&lt;xml&gt;&lt;ToUserName&gt;&lt;![CDATA[your name]]&gt;&lt;/ToUserName&gt;
    &lt;FromUserName&gt;&lt;![CDATA[test name]]&gt;&lt;/FromUserName&gt; 
    &lt;CreateTime&gt;1348831860&lt;/CreateTime&gt;
    &lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;/MsgType&gt;
    &lt;Content&gt;&lt;![CDATA[test text]]&gt;&lt;/Content&gt;
    &lt;MsgId&gt;1234567890123456&lt;/MsgId&gt;
    &lt;/xml&gt;'''

}

def make_post(action):
    '''模拟用户行为产生的消息提交给接口程序'''

    conn = httplib.HTTPConnection(interface_url)

    headers = { "Content-type": "text/xml",
                "Content-Length": "%d" % len(messages[action])}

    # 生成签名相关变量
    timestamp = int(time.time())

    nonce = random.randint(1,100000)

    signature = makeSignature(Token, timestamp, nonce)

    params = urllib.urlencode({'signature': signature, 'timestamp': timestamp, 'nonce': nonce})

    conn.request("POST", interface_path + "?" +params, "", headers)

    print messages[action]
    conn.send(messages[action])

    response = conn.getresponse()

    print response.status, response.reason

    print response.read()

    conn.close()



def makeSignature(Token, timestamp, nonce):
    '''生成签名'''
    try:
        Token = int(Token)
    except Exception, e:
        pass

    sorted_arr = map(str, sorted([Token, timestamp, nonce]))

    sha1obj = hashlib.sha1()
    sha1obj.update(''.join(sorted_arr))
    hash = sha1obj.hexdigest()

    return hash

def listAction():
    print("======Supported actions:======")
    for i in messages.keys():
        print(i)
    print("==============================")

if __name__ == '__main__':
    if len(sys.argv) &lt; 2:   
        print (u"Please input your action")
        listAction()
    else:
        if (messages.has_key(sys.argv[1])):
            make_post(sys.argv[1])
        else:
            print("No this action")
            listAction()
</code></pre>

<p>运行：</p>

<pre><code>python weixin_unitest.py subscribe
python weixin_unitest.py text
</code></pre>

<p>结合SAEPython（sae服务器），在本地完成开发测试就很方便了。</p>

<h1>广告</h1>

<p>关注易生活，关注微信公众：EasyTool</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hello sae python]]></title>
    <link href="http://liuliyun.me/blog/2013/05/10/sae_python_helloworld/"/>
    <updated>2013-05-10T14:10:00+08:00</updated>
    <id>http://liuliyun.me/blog/2013/05/10/sae_python_helloworld</id>
    <content type="html"><![CDATA[<p>看看如何在sae上部署第一个python应用吧</p>

<!--more-->


<p>首先在sae上创建一个python应用</p>

<p>创建好后其实是没有完成创建的，无法进行代码管理</p>

<p>需要先svn签出、签入</p>

<p>SAE采用svn来作为代码部署工具</p>

<ol>
<li><p>检出应用helloworld目录</p>

<pre><code> svn co https://svn.sinaapp.com/helloworld
</code></pre></li>
<li><p>创建版本目录</p>

<p> 进入helloworld目录，创建一个目录1作为默认版本，切换到目录1。</p>

<pre><code> cd helloworld
 ~/helloworld$ mkdir 1
 ~/helloworld$ cd 1
</code></pre></li>
<li><p>创建应用配置文件config.yaml，内容如下：</p>

<pre><code> name: helloworld
 version: 1
</code></pre></li>
<li><p>创建index.wsgi，内容如下：</p>

<pre><code> import sae

 def app(environ, start_response):
     status = '200 OK'
     response_headers = [('Content-type', 'text/plain')]
     start_response(status, response_headers)
     return ['Hello, world!']

 application = sae.create_wsgi_app(app)
</code></pre></li>
<li><p>部署应用</p>

<p> 提交刚刚编辑的代码，就可以完成应用在SAE上的部署。</p>

<pre><code> svn add 1/
 ~/helloworld$ svn ci -m "initialize project"
</code></pre></li>
</ol>

]]></content>
  </entry>
  
</feed>
